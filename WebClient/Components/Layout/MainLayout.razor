@using Microsoft.AspNetCore.WebUtilities
@using WebClient.Services
@inherits LayoutComponentBase
@inject HttpClient Http
@inject IHostEnvironment HostEnvironment

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<PageTitle>Quiz Review</PageTitle>
<MudPopoverProvider />

<MudLayout>
    <AuthorizeView>
        <Authorized>
            <div class="page vh-100">
                <main class="d-flex flex-column">
                    <div class="top-row px-4">
                        <div class="d-flex justify-content-between align-items-center text-white">
                            <div class="d-flex align-items-center" @onclick="@GoToHome" style="cursor:pointer">
                                <img src="/image/logo1.png" style="width:auto;height:40px" />
                                <h4 class="mb-0 ms-4">Exam Review System</h4>
                            </div>
                            <div class="d-flex align-items-center">
                                <div @onclick=@OpenProfileModel style="border-right:1px solid white;cursor:pointer" class="pe-5">
                                    <label >User: @Email?.Replace("@fpt.edu.vn", string.Empty) (@Role)</label><br/>
                                    <label >Campus: @Campus</label>
                                </div>
                                <div>
                                    <a @onclick=@Logout class="text-white ms-5" style="cursor:pointer">Log out</a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="content p-3">
                        @if (!string.IsNullOrEmpty(Header))
                        {
                            <div style="border-bottom:1px solid #d9d8d8;" class="d-flex align-items-center pb-5 fw-bold fs-6">
                                <a href="@HeaderLink" class="text-info">@Header</a>
                                @if (!string.IsNullOrEmpty(SubHeader))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.ChevronRight" />
                                }
                                <span>@SubHeader</span>
                                @if (!string.IsNullOrEmpty(SubHeader1))
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.ChevronRight" />
                                }
                                <span>@SubHeader1</span>
                            </div>
                        }
                    </div>
                    <article class="content px-5 flex-grow-1">
                        <CascadingValue Value="this">
                            @Body
                            <Spinner/>
                        </CascadingValue>
                    </article>

                    <div class="content p-3">
                        <div style="border-top:1px solid #d9d8d8;" class="fs-5">
                            <label class=" pt-4">Â© 2024 - FPT Education | <a href="#">About us</a></label>
                        </div>
                    </div>
                </main>
            </div>
        </Authorized>
        <NotAuthorized>
            <main>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </NotAuthorized>
    </AuthorizeView>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    @if (HostEnvironment.IsProduction())
    {
        <span>An error has occurred.</span>
    }
    else
    {
        <span>An unhandled exception occurred.</span>
    }
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    public string Email { get; set; }

    public string Role { get; set; }

    public string Campus { get; set; }

    public string Header { get; set; }

    public string HeaderLink { get; set; }

    public string SubHeader { get; set; }

    public string SubHeader1 { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var token = query["token"];
        if (!string.IsNullOrEmpty(token))
        {
            await CustomAuthStateProvider.UpdateAuthenticationState(token);

            NavManager.NavigateTo("/home",true);
        }

        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            await UpdateName();
            // NavManager.NavigateTo("/Home");
        }
        else
        {
            NavManager.NavigateTo("/login");
        }
    }


    public async Task UpdateName()
    {
        var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        Email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value!;
        var userRole = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value, out var roleId) ? roleId : 0;
        var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

        var resp = await UserService.GetByIdAsync(userId);

        if (resp.IsSuccessful)
        {
            Campus = resp.Item.CampusName;
        }

        switch (userRole)
        {
            case 1:
                {
                    Role = "Admin";
                    break;
                }

            case 2:
                {
                    Role = "Examiner";
                    break;
                }

            case 3:
                {
                    Role = "Lecture";
                    break;
                }

            case 4:
                {
                    Role = "Head of Department";
                    break;
                }
            case 5:
                {
                    Role = "Curriculum Development";
                    break;
                }
            default:
                {
                    Role = "Guest";
                    break;
                }
        }
    }

    private async Task<AuthenticationResponse> GetKeys()
    {
        var response = await UserService.GetJWT();

        return response;
    }

    public async Task Logout()
    {
        await UserService.ClearJWT();
        await CustomAuthStateProvider.Logout();
        NavManager.NavigateTo("/login", true);
    }

    public void RefreshLayout()
    {
        this.StateHasChanged();
    }

    private async Task OpenProfileModel()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
            };

        var parameters = new DialogParameters<Profile>();

        var dialog = await DialogService.ShowAsync<Profile>("Profile Information", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
        }
    }

    public void GoToHome()
    {
        NavManager.NavigateTo("/Home");
    }
}