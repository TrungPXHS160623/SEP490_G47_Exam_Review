@inherits LayoutComponentBase
@inject HttpClient Http

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<PageTitle>Quiz Review</PageTitle>
<MudPopoverProvider />
<AuthorizeView>
    <Authorized>
        <div class="page">
            <main>
                <div class="top-row px-4">
                    <div class="d-flex justify-content-between align-items-center text-white">
                        <div>
                            <label>FPT Education on Coursera - Mentoring Support System</label>
                        </div>
                        <div>
                            <a href="#" class="text-white me-5">Log out</a>
                            <label>Welcom: @Email</label>
                        </div>
                    </div>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>
    </Authorized>
    <NotAuthorized>
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </NotAuthorized>
</AuthorizeView>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    public string Email { get; set; } = "hungle@gmail.com";

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            NavManager.NavigateTo("/Home");
        }
        else
        {
            var data = await GetKeys();

            if (!string.IsNullOrEmpty(data.Token))
            {
                var customAuthStateProvider = AuthStateProvider as CustomAuthenticationStateProvider;
                if (customAuthStateProvider != null)
                {
                    await customAuthStateProvider.UpdateAuthenticationState(data.Token);
                    NavManager.NavigateTo("/Home");

                }
            }
            NavManager.NavigateTo("/login");
        }
    }

    public void UpdateName(string email)
    {
        Email = email;
    }

    private async Task<AuthenticationResponse> GetKeys()
    {
        var response = await Http.GetFromJsonAsync<AuthenticationResponse>("https://localhost:7255/api/Account/GetJWT");

        return response;
    }
}