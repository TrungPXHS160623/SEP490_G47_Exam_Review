@inherits LayoutComponentBase
@inject HttpClient Http

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<PageTitle>Quiz Review</PageTitle>
<MudPopoverProvider />
<AuthorizeView>
    <Authorized>
        <div class="page">
            <main>
                <div class="top-row px-4">
                    <div class="d-flex justify-content-between align-items-center text-white">
                        <div>
                            <label>FPT Education on Coursera - Mentoring Support System</label>
                        </div>
                        <div>
                            <a @onclick=@Logout class="text-white me-5" style="cursor:pointer">Log out</a>
                            <label>Welcom: @Email</label>
                        </div>
                    </div>
                </div>

                <article class="content px-5">
                    @Body
                </article>
                <div class="content px-5" >
                    <div style="border-top:1px solid #d9d8d8;" class="fs-5">
                        <label class=" pt-4">© 2023 - FPT Education | </label><a href="#">About us</a>
                    </div>
                </div>
            </main>
        </div>
    </Authorized>
    <NotAuthorized>
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </NotAuthorized>
</AuthorizeView>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    public string Email { get; set; } = "hungle@gmail.com";

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            await UpdateName();
            // NavManager.NavigateTo("/Home");
        }
        else
        {
            var data = await GetKeys();

            if (!string.IsNullOrEmpty(data.Token))
            {
                var customAuthStateProvider = AuthStateProvider as CustomAuthenticationStateProvider;
                if (customAuthStateProvider != null)
                {
                    await customAuthStateProvider.UpdateAuthenticationState(data.Token);
                    // NavManager.NavigateTo("/Home");
                    await UpdateName();
                }
            }
            else
            {
                NavManager.NavigateTo("/login");
            }
        }
    }

    public async Task UpdateName()
    {
        var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        Email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value!;
    }

    private async Task<AuthenticationResponse> GetKeys()
    {
        var response = await AccountService.GetJWT();

        return response;
    }

    public async Task Logout()
    {
        await AccountService.ClearJWT();
        CustomAuthStateProvider.NotifyUserLogout();
        NavManager.NavigateTo("/login", true);
    }
}