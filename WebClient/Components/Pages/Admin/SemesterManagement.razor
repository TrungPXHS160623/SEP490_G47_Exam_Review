@page "/Admin/SemesterManagement"
@inject HttpClient Http

<h1 style="text-align: center;">Semester Management</h1>

<style>
    td {
        vertical-align: middle;
    }
</style>

<div class="d-flex justify-content-center">
    <div class="w-75 custom-box ">
        <div class="d-flex align-items-center justify-content-between mt-4 mb-4">
            <MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="() => OpenAddEditDialogAsync(0)">Add New Semester</MudButton>
        </div>
        @if (SemesterList.Count > 0)
        {  
            <table class="table table-striped table-bordered text-center">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Semester Name</th>
                        <th>Star Date</th>
                        <th>End Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (SemesterList != null)
                    {
                        var index = 1;
                        @foreach (var semester in SemesterList)
                        {
                            
                            <tr>
                                <td>@index</td>
                                <td class="text-start">@semester.SemesterName</td>
                                <td>@semester.StartDate.Value.ToString("yyyy-MM-dd")</td>
                                <td>@semester.EndDate.Value.ToString("yyyy-MM-dd")</td>

                                <td>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Filled" @onclick="() => OpenAddEditDialogAsync(semester.SemesterId)"></MudIconButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" @onclick="() => DeleteUser(semester.SemesterId)"></MudIconButton>
                                </td>
                            </tr>
                            index++;
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <span class="text-danger">No data found.</span>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    @inject ISemesterService SemesterService
    private List<Semester> SemesterList = new List<Semester>();

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuService.CheckAccess(userId, 13);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await GetData();

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Semester Management";
                    Layout.SubHeader1 = string.Empty;
                    Layout.RefreshLayout();
                }
            }
        }
    }

    public async Task GetData()
    {
        var resp = await SemesterService.GetSemester();

        if (resp.IsSuccessful)
        {
            SemesterList = resp.Items;
        }
    }

    private async Task DeleteUser(int campusId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
            };

        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Content, "Are you sure want to delete this semester?" },
            { x => x.BtnTextConfirm, "Delete" },
            { x => x.BtnTextCancel, "Cancel" },
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete Semester", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {

            var response = await SemesterService.DeleteSemester(campusId);
            if (response.IsSuccessful)
            {
                await GetData();
            }

        }
    }

    private async Task OpenAddEditDialogAsync(int campusId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<SemesterModify>
        {
            {x => x.SemesterId,campusId}
        };

        var dialog = await DialogService.ShowAsync<SemesterModify>(campusId == 0 ? "Add Semester" : "Update Semester", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetData();
        }
    }

}
