@page "/Admin/EditUser/{UserId:int}"
@page "/Admin/AddUser"

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" class="w-50">
    <div class="d-flex align-items-center">
        <label class="col-3">Email:</label>
        @if (!isAddOrEdit)
        {
            <MudText>@user.Mail</MudText>
        }
        else
        {
            <MudTextField @bind-Value="user.Mail" Variant="Variant.Outlined" Margin="Margin.Dense" />
        }
    </div>
    <div class="d-flex align-items-center">
        <label class="col-3">Role:</label>
        @if (!isAddOrEdit)
        {
            <MudText>@roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName</MudText>
        }
        else
        {
            <MudSelect @bind-Value="user.RoleId"
                       Text="@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName)"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense"
                       Clearable
                       AnchorOrigin="Origin.BottomCenter">

                @if (roleList.Count > 0)
                {
                    @foreach (var item in roleList)
                    {
                        <MudSelectItem T="int?" Value="@item.RoleId">@item.RoleName</MudSelectItem>
                    }
                }
            </MudSelect>
        }
    </div>
    <div class="d-flex align-items-center">
        <label class="col-3">Campus:</label>
        @if (!isAddOrEdit)
        {
            <MudText>@camList.FirstOrDefault(x => x.CampusId == user.CampusId)?.CampusName</MudText>
        }
        else
        {
            <MudSelect @bind-Value="user.CampusId"
                       Text="@(camList.FirstOrDefault(x => x.CampusId == user.CampusId)?.CampusName)"
                       Variant="Variant.Outlined"
                       Margin="Margin.Dense"
                       Clearable
                       AnchorOrigin="Origin.BottomCenter">

                @if (camList.Count > 0)
                {
                    @foreach (var item in camList)
                    {
                        <MudSelectItem T="int?" Value="@item.CampusId">@item.CampusName</MudSelectItem>
                    }
                }
            </MudSelect>
        }
    </div>
    <div class="d-flex align-items-center">
        <label class="col-3">Active:</label>
        <MudCheckBox @bind-Value="user.IsActive" Disabled="@(!isAddOrEdit)" />
    </div>
    <div>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(UserId != null ? (isAddOrEdit ? "Save" : "Update") : (isAddOrEdit ? "Create" : null))</MudButton>
        <MudButton Variant="@(UserId != null && isAddOrEdit == true ? Variant.Outlined : Variant.Filled)"
                   Color="@(UserId != null && isAddOrEdit == true ? Color.Error : Color.Default)"
                   OnClick="Cancel" Class="ms-4">
            @(UserId != null && isAddOrEdit == true ? "Cancel" : "Back")
        </MudButton>
    </div>
</EditForm>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int? UserId { get; set; }

    private User user = new();

    private List<Campus> camList = new();

    private List<UserRole> roleList = new();

    private bool isAddOrEdit { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            if (UserId != null)
            {
                await FetchUserDetails();
            }
            else
            {
                isAddOrEdit = true;
            }
        }

        await GetCampus();
        await GetRoles();

        if (Layout != null)
        {
            Layout.Header = "Home";
            Layout.HeaderLink = "/Home";
            Layout.SubHeader = UserId != null ? "Edit User" : "Add User";
            Layout.RefreshLayout();
        }
    }

    private async Task FetchUserDetails()
    {
        var result = await AccountService.GetByIdAsync(UserId.Value);
        if (result != null)
        {
            user = result.Item;
        }
    }

    private async Task HandleValidSubmit()
    {
        RequestResponse resp = new();

        if (UserId != null && isAddOrEdit == false)
        {
            isAddOrEdit = true;
        }
        else if (UserId != null && isAddOrEdit == true)
        {
            resp = await AccountService.UpdateAsync(user);
        }
        else
        {
            resp = await AccountService.CreateAsync(user);
        }

        if (resp.IsSuccessful)
        {
            NavManager.NavigateTo("/usermanagement");
        }
    }



    private async Task GetCampus()
    {
        var result = await CampusServive.GetCampus();
        if (result != null)
        {
            camList = result.Items;
        }
    }

    private async Task GetRoles()
    {
        var result = await RoleServive.GetRoles();
        if (result != null)
        {
            roleList = result.Items;
        }
    }

    private void Cancel()
    {
        if (UserId != null && isAddOrEdit == true)
        {
            isAddOrEdit = false;
        }
        else
        {
            NavManager.NavigateTo("/UserManagement");
        }
    }
}

