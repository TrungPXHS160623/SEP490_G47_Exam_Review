@page "/userdetails/{UserId:int}"
@inject IAccountService accountService
@inject NavigationManager NavigationManager
<h3>User Details</h3>

@if (user != null)
{
    <div>
        <p><strong>Email:</strong> @user.Mail</p>
        <p><strong>Is Active:</strong> @user.IsActive</p>
        <p><strong>Role:</strong> @user.UserRole?.RoleName</p>
        <p><strong>Campus:</strong> @user.Campus?.CampusName</p>
    </div>
    <div class="mt-3">
        <button class="btn btn-primary mr-2" @onclick="() => EditUser(user.UserId)">Edit</button>
        <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
    </div>
}
else
{
    <p>Loading user details...</p>
}

@code {
    [Parameter] public int UserId { get; set; }
    private User? user;

    protected override async Task OnInitializedAsync()
    {
        await FetchUserDetail();
    }

    private async Task FetchUserDetail()
    {
        var result = await accountService.GetByIdAsync(UserId);
        if (result != null)
        {
            user = result.Item;
        }
    }
    private void EditUser(int UserId)
    {
        NavigationManager.NavigateTo($"/edituser/{UserId}");
    }

    private async Task DeleteUser()
    {
        // var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        // if (confirmDelete)
        // {
        //     var deletedUser = await accountService.DeleteAsync(UserId);
        //     if (deletedUser != null)
        //     {
        //         Optionally, show a success message or navigate to another page
        //         NavigationManager.NavigateTo("/usermanagement"); Redirect to user management page after deletion
        //     }
        //     else
        //     {
        //         Handle deletion failure
        //         Optionally show an error message
        //     }
        // }
    }
}
