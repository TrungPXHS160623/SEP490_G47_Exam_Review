<style>
    .form-group {
        display: flex;
        align-items: center
    }

    .mud-input.mud-disabled {
        background-color: rgba(0, 0, 0, 0.1);
        color: black;
    }
</style>

<MudDialog>
    <DialogContent>
        <EditForm Model="subject" OnValidSubmit="Excute">
            <FluentValidationValidator />
            <MudTextField @bind-Value=subject.SubjectCode Variant="Variant.Outlined" Label="Subject Code" Class="mb-4" For="@(() => subject.SubjectCode)"></MudTextField>
            <MudTextField @bind-Value=subject.SubjectName Variant="Variant.Outlined" Label="Subject Name" Class="mb-4" For="@(() => subject.SubjectName)"></MudTextField>
            @if (SubjectId != 0)
            {
                <MudCheckBox @bind-Value=subject.IsDeleted Label="Is Disabled" Color="Color.Error" UncheckedColor="Color.Default"></MudCheckBox>
            }
        <div class="d-flex justify-content-end mb-3">
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" class="btn btn-block col-3 ms-4" Variant="Variant.Filled" Disabled="@_processing">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Saving</MudText>
                }
                else
                {
                    <MudText>@(SubjectId == 0 ? "Add" : "Save")</MudText>
                }
            </MudButton>
            <MudButton Color="Color.Error" OnClick="Cancel" Class="col-3 btn btn-block" Variant="Variant.Outlined">Cancel</MudButton>
        </div>
        </EditForm>
    </DialogContent>
</MudDialog>



@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int? SubjectId { get; set; }

    SubjectRequest subject = new SubjectRequest();

    private bool _processing = false;

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        if (SubjectId != 0)
        {
            var resp = await this.SubjectService.GetSubjectById(SubjectId.Value);
            await Task.Delay(100);

            if (resp.IsSuccessful)
            {
                subject = resp.Item;
            }
        }
    }

    public async Task Excute()
    {
        if (SubjectId != 0)
        {
            var resp = await this.SubjectService.UpdateSubject(subject);

            if (resp.IsSuccessful)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        else
        {
            var resp = await this.SubjectService.AddSubject(subject);

            if (resp.IsSuccessful)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
    }



}
