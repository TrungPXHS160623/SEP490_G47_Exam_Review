@page "/usermanagement"
@inject IAccountService accountService

<h3>User Management</h3>

<div>
    <input type="text" @bind="searchText" placeholder="Search users" />
    <button class="btn btn-primary" @onclick="FetchUsers">Search</button>
    <button class="btn btn-success" @onclick="AddNewUser">Add New User</button>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Email</th>
            <th>Is Active</th>
            <th>Role</th>
            <th>Campus</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null)
        {
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Mail</td>
                    <td>@user.IsActive</td>
                    <td>@user.UserRole?.RoleName</td>
                    <td>@user.Campus?.CampusName</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => UpdateUser(user.UserId)">Update</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<User> users;
    private string searchText;

    protected override async Task OnInitializedAsync()
    {
        await FetchUsers();
    }

    private async Task FetchUsers()
    {
        var response = await accountService.GetAllUserList();
        if (response.IsSuccessful)
        {
            users = response.Items;
        }
    }

    private void AddNewUser()
    {
        // Redirect to a page or modal for adding a new user
    }

    private async Task UpdateUser(int id)
    {
        // Redirect to a page or modal for updating user
    }

   
}
