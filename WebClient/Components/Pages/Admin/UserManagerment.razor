@page "/usermanagement"

<style>
    td {
        vertical-align: middle
    }
</style>

<div class="w-50">
    <div class="d-flex align-items-center justify-content-between mt-4 mb-4">
        <label class="me-5">User: </label>
        <input class="form-control me-4" type="text" @bind="searchText" placeholder="Search users" />
        <button class="btn btn-success col-auto me-4" @onclick="FetchUsers">Search</button>
        <span class="text-info col-auto" style="cursor:pointer;" @onclick="AddNewUser">Add New User</span>
    </div>

    @if (users.Count > 0)
    {
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Email</th>
                    <th>Is Active</th>
                    <th>Role</th>
                    <th>Campus</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (users != null)
                {
                    @foreach (var user in users)
                    {
                        <tr>

                            <td>
                                <div class="text-info" @onclick="() => ViewUserDetail(user.UserId)" style="cursor:pointer;">@user.Mail</div>
                            </td>
                            <td>
                                <MudCheckBox @bind-Value="@user.IsActive" Disabled></MudCheckBox>
                             </td>
                             <td>@user.UserRole?.RoleName</td>
                            <td>@user.Campus?.CampusName</td>
                            <td>
                                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="() => DeleteUser(user.UserId)">Delete</MudButton>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    } else
    {
        <span class="text-danger">No data found.</span>
    }
</div>

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private List<User> users = new List<User>();

    private string searchText;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            await FetchUsers();
        }

        if (Layout != null)
        {
            Layout.Header = "Home";
            Layout.HeaderLink = "/Home";
            Layout.SubHeader = "User Management";
            Layout.SubHeader1 = string.Empty;
            Layout.RefreshLayout();
        }
    }

    private async Task FetchUsers()
    {
        // Check if there is search text to filter
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            var response = await AccountService.GetAllWithFilterAsync(searchText);
            if (response.IsSuccessful)
            {
                users = response.Items;
            }
        }
        else
        {
            var response = await AccountService.GetAllUserList();
            if (response.IsSuccessful)
            {
                users = response.Items;
            }
        }
    }

    private async Task DeleteUser(int UserId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Content, "Are you sure want to delete this account?" },
            { x => x.BtnTextConfirm, "Delete" },
            { x => x.BtnTextCancel, "Cancel" },
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete Account", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await AccountService.DeleteAsync(UserId);
            if (response.IsSuccessful)
            {
                await FetchUsers();
            }
        }
    }

    private void AddNewUser()
    {
        NavManager.NavigateTo($"/Admin/AddUser");
    }


    private void ViewUserDetail(int userId)
    {
        NavManager.NavigateTo($"/Admin/EditUser/{userId}");
    }

}
