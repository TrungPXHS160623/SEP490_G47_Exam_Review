@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IConfiguration config
@inject HttpClient Http
<PageTitle>Login</PageTitle>


<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .login-box {
        display: flex;
        width: 50%;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
        border-radius: 10px;
        overflow: hidden;
    }

    .illustration {
        background-size: cover;
        width: 50%;
        position: relative;
    }

        .illustration .text {
            position: absolute;
            left: 50%;
            transform: translate(-50%, 0);
            color: #5D3A6E;
            top: 20px;
        }

    .form-container {
        padding: 40px;
        width: 100%;
        background-color: #fff;
    }

        .form-container h2 {
            margin-bottom: 20px;
            color: #5D3A6E;
        }
</style>

<div class="container">
    <div class="login-box">
        <div class="form-container d-flex flex-column justify-content-center align-items-center">
            <h2 class="text text-center pb-5">Exam Review System</h2>
            <img src="/image/logo.png" style="width:auto;height:100%"/>

            <h4 class="mt-5">Single sign on with email @@fpt.edu.vn</h4>

            <button class="btn btn-google" style="border:1px solid rgba(0,0,0,0.5);border-radius:5px" @onclick="SignInWithGoogle">
                <img src="https://developers.google.com/identity/images/g-logo.png" alt="Google Logo" width="20" height="20"  />
                Sign in with Google
            </button>
        </div>

    </div>
</div>


@code {
    public UserRequest accountRequest = new UserRequest();
    private bool _processing = false;
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            NavManager.NavigateTo("/home");
        }

        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("errorMsg", out var errorMsg))
        {
            // Show the error message in a snackbar
            Snackbar.Add(errorMsg, Severity.Error);
        }
    }

    public async Task LoginAsync()
    {
        _processing = true;

        var resp = await this.UserService.LoginUserAsync(accountRequest);

        if (resp.IsSuccessful)
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(resp.Token!);
            NavManager.NavigateTo("/home");
        }

        _processing = false;

    }

    private async Task SignInWithGoogle()
    {

        var clientId = await GetKeys();
        // Điều hướng người dùng đến trang đăng nhập Google
        var redirectUrl = $"https://accounts.google.com/o/oauth2/v2/auth?client_id={clientId.ClientId}&redirect_uri=https://localhost:7255/api/user/googlelogincallback&response_type=code&scope=openid%20profile%20email";
        NavManager.NavigateTo(redirectUrl, true);
    }

    private async Task<GoogleKeys> GetKeys()
    {
        var response = await Http.GetFromJsonAsync<GoogleKeys>("https://localhost:7255/api/User/google-keys");

        return response;
    }

    private class GoogleKeys
    {
        public string ClientId { get; set; }
    }
}
