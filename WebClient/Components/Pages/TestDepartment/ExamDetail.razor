@using Microsoft.AspNetCore.Hosting
<style>
    .img-preview img {
        width: 100%;
        height: auto;
        display: block;
    }

    .centerSwitch .mud-switch {
        margin-right: 0px !important;
        margin-inline-end: 0px !important;
        justify-content: center !important;
    }

    .form-group {
        display:flex;
        align-items:center
    }
</style>
<MudDialog>
    <DialogContent>
        <div class="form-group mb-4">
            <label class="col-3">Exam Code</label>
            <MudTextField @bind-Value=exam.ExamCode class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable ReadOnly=@IsView />
        </div>
        <div class="form-group mb-4">
            <label class="col-3">Subject Name</label>
            <MudText class="form-control">@($"[{exam.SubjectCode}] {exam.SubjectName}")</MudText>
        </div>
        <div class="form-group mb-4">
            <label class="col-3">Exam Creater</label>
            <MudText class="form-control">@exam.CreaterName</MudText>
        </div>
        <div class="form-group mb-4">
            <label class ="col-3">Head of Department</label>
            <MudTextField @bind-Value=exam.ExamCode class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable ReadOnly=@IsView />
        </div>
        <div class="form-group mb-4">
            <label class="col-3">Status</label>
            <MudTextField @bind-Value=exam.ExamStatusContent class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable ReadOnly=@IsView />
        </div>
        <div class="form-group mb-4">
            <label class ="col-3">Exam Duration</label>
            <MudTextField @bind-Value=exam.ExamDuration class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable ReadOnly=@IsView />
        </div>
        <div class="form-group mb-4">
            <label class="col-3">Exam Type</label>
            <MudTextField @bind-Value=exam.ExamType class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" Clearable ReadOnly=@IsView />
        </div>
        <div class="form-group mb-4">
            <label class="col-3">Start Date</label>
            <MudDatePicker @bind-Date=exam.StartDate class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" PickerVariant="PickerVariant.Dialog" Clearable ReadOnly=@IsView />
        </div>
        <div class="form-group mb-4">
            <label class="col-3">End Date</label>
            <MudDatePicker @bind-Date=exam.EndDate class="form-control" Margin="Margin.Dense" Variant="Variant.Outlined" PickerVariant="PickerVariant.Dialog" Clearable ReadOnly=@IsView />
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" class="btn btn-block col-3" Variant="Variant.Filled" OnClick=Submit Disabled="@_processing">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Edit</MudText>
            }
            else
            {
                <MudText>Edit</MudText>
            }
        </MudButton>
        <MudButton Color="Color.Error" OnClick="Cancel" Class="col-3 btn btn-block" Variant="Variant.Outlined">Cancel</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int? ExamId { get; set; }

    IList<IBrowserFile> files = new List<IBrowserFile>();

    [Parameter]
    public bool IsView { get; set; }

    private bool _processing = false;

    private string ExcuteText { get; set; } = string.Empty;

    private TestDepartmentExamResponse exam = new TestDepartmentExamResponse();

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    public string text { get; set; } = "Text Dummy";

    public DateTime? date { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        var resp = await this.ExamServive.GetExamById(ExamId.Value);

        if (resp.IsSuccessful)
        {
            exam = resp.Item;
        }

        ExcuteText = "Edit";

    }

    public async Task Excute()
    {
        if (IsView)
        {
            IsView = false;
            ExcuteText = "Save Change";
        }
        else
        {

        }
    }

    public async Task Back()
    {
        if (IsView)
        {
            MudDialog.Cancel();
        }
        else
        {
            IsView = true;
            ExcuteText = "Edit";
        }
    }
}
