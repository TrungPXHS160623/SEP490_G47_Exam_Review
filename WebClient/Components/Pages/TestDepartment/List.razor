@page "/TestDepartment/ExamList"

<style>
    .mud-table-cell {
        border: none !important;
        text-align: center;
    }

    .mud-table-head .mud-table-row .mud-table-cell {
        border-bottom: 1px solid grey !important;
        font-size: 1.2rem;
    }

    .mud-table {
        box-shadow: none !important;
    }

    .mud-table-root {
        border-collapse: separate !important;
        border-spacing: 0 !important;
    }

    .mud-table-head .mud-table-row {
        box-shadow: 0 5px 10px #e1e5ee;
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 99;
    }
</style>

<div class="mt-4">
    <div class="d-flex mb-4">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload"
                   OnClick="OpenImportDialogAsync">
            Import Exam
        </MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Add"
                   Class="ms-4">
            Add Exam
        </MudButton>
    </div>
    <div class="custom-box mb-4">
        <div class="d-flex align-items-center flex-wrap w-50">
            <MudTextField @bind-Value="request.ExamCode" Label="Exam Code" Variant="Variant.Outlined" Margin="Margin.Dense" Class="me-4 col-7" Clearable></MudTextField>

            <MudSelect @bind-Value="request.StatusId"
                       Variant="Variant.Outlined"
                       Label="Status"
                       Margin="Margin.Dense"
                       AnchorOrigin="Origin.BottomCenter"
                       Clearable
                       Class="me-4 col-auto">
                @if (statusList.Count > 0)
                {
                    @foreach (var item in statusList)
                    {
                        <MudSelectItem T="int?" Value="item.ExamStatusId">@item.StatusContent</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" OnClick="GetData">Search</MudButton>
        </div>
    </div>

    <div class="custom-box">
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <h4>Exam List</h4>
                <h6>Selected Exam: @selectedExams.Count</h6>
            </div>
            <div>
                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(selectedExams.Count == 0)" OnClick="AssignExam">Tranfer Exam to Head Deparment</MudButton>
            </div>
        </div>
        <div>
            @if (ExamList.Count > 0)
            {
                <MudTable T=TestDepartmentExamResponse Items="ExamList" FixedHeader="true" Height="400px" Hover="true" MultiSelection="true" @bind-SelectedItems="selectedExams">
                    <HeaderContent>
                        <MudTh>Exam Code</MudTh>
                        <MudTh>Campus</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Head of Department</MudTh>
                        <MudTh>Estimate Time</MudTh>
                        <MudTh>Start Date</MudTh>
                        <MudTh>End Date</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.ExamCode</MudTd>
                        <MudTd>@context.CampusName</MudTd>
                        <MudTd>@context.ExamStatusContent</MudTd>
                        <MudTd>@context.HeadDepartmentName</MudTd>
                        <MudTd>@(context.EstimatedTimeTest.HasValue ? context.EstimatedTimeTest.Value.ToString("dd-MM-yyyy") : "N/A")</MudTd>
                        <MudTd>@(context.StartDate.HasValue ? context.StartDate.Value.ToString("dd-MM-yyyy") : "N/A")</MudTd>
                        <MudTd>@(context.EndDate.HasValue ? context.EndDate.Value.ToString("dd-MM-yyyy") : "N/A")</MudTd>
                        <MudTd>
                            <div class="d-flex align-items-center justify-content-around">
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => OpenAddEditDialogAsync(context.ExamId))">Detail</MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                    @*<PagerContent>
                @if (AccList.Count > 10)
                {
                <MudTablePager />
                }
                </PagerContent> *@
                </MudTable>
            }
            else
            {
                <p>No Data</p>
            }
        </div>
        <div class="mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="@(selectedExams.Count == 0)" Class="me-4">Export Selected Exam</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Surface">Export All</MudButton>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    IList<IBrowserFile> _files = new List<IBrowserFile>();

    public List<TestDepartmentExamResponse> ExamList = new List<TestDepartmentExamResponse>();

    private HashSet<TestDepartmentExamResponse> selectedExams = new HashSet<TestDepartmentExamResponse>();

    public List<ExamStatus> statusList = new List<ExamStatus>();

    public ExamSearchRequest request = new();

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuServive.CheckAccess(userId, 3);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await GetData();

                var sList = await this.StatusServive.GetStatus();
                if (sList.IsSuccessful)
                {
                    statusList = sList.Items;
                }

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Exam Assign List";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task OpenAddEditDialogAsync(int examId, bool isView = true)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<ExamDetail>
        {
            { x => x.IsView, isView },
            {x => x.ExamId,examId}
        };

        var dialog = await DialogService.ShowAsync<ExamDetail>(isView == true ? "Exam Detail" : "Exam Update", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetData();
        }
    }

    private async Task OpenImportDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<ImportDialog>();

        var dialog = await DialogService.ShowAsync<ImportDialog>("Import Exam", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetData();
        }
    }

    private void UploadFiles(IBrowserFile file)
    {
        _files.Clear();
        _files.Add(file);
    }

    private async Task GetData()
    {
        var eList = await this.ExamServive.GetExamList(request);
        if (eList.IsSuccessful)
        {
            ExamList = eList.Items;
        }
        selectedExams.Clear();
    }

    private async Task AssignExam()
    {
        if (selectedExams.Count > 0)
        {
            var msg = CheckSelectedExam();

            if (msg.Length == 0)
            {
                var mailList = selectedExams.GroupBy(x => x.HeadDepartmentName).Select(x => x.Key).ToList();

                List<MailUtil> list = new();

                foreach (var item in mailList)
                {
                    var mail = new MailUtil
                        {
                            MailTo = item
                        };
                    list.Add(mail);
                }

                var resp = await this.ExamServive.ChangeStatusExam(selectedExams.ToList());

                if (resp.IsSuccessful)
                {
                    var result = await this.MailServive.SendMail(list);
                    await GetData();
                }
            }
            else
            {
                foreach (var item in msg)
                {
                    Snackbar.Add(item, Severity.Warning);
                }
            }
        }
    }

    public string[] CheckSelectedExam()
    {
        List<string> errors = new List<string>();

        var examsWithWrongStatus = selectedExams.Where(x => x.ExamStatusId != 1).ToList();
        foreach (var exam in examsWithWrongStatus)
        {
            errors.Add($"Exam {exam.ExamCode} is already assigned. Cannot Re-Assign!");
        }

        var examsWithMissingDates = selectedExams.Where(x => x.EndDate == null || x.StartDate == null).ToList();
        foreach (var exam in examsWithMissingDates)
        {
            errors.Add($"Exam {exam.ExamCode} has Start Date or End Date not chosen yet.");
        }

        return errors.ToArray();
    }
}