@page "/Lecture/ExamList"
<h1 style="text-align: center;">List Assign</h1>
<style>
    .mud-table-cell {
        border: none !important;
        text-align: center;
    }

    .mud-table-head .mud-table-row .mud-table-cell {
        border-bottom: 1px solid grey !important;
        font-size: 1.2rem;
    }

    .mud-table {
        box-shadow: none !important;
    }

    .mud-table-root {
        border-collapse: separate !important;
        border-spacing: 0 !important;
    }

    .mud-table-head .mud-table-row {
        box-shadow: 0 5px 10px #e1e5ee;
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 99;
    }
</style>
<div class="d-flex justify-content-center">
    <div class="mt-4">
        <div class="d-flex align-items-center flex-wrap custom-box mb-4">
            <MudTextField @bind-Value="request.ExamCode" Label="Exam Code" Variant="Variant.Outlined" Margin="Margin.Dense" Class="me-4 col-7" Clearable></MudTextField>
            <MudSelect @bind-Value="request.StatusId"
                       Variant="Variant.Outlined"
                       Label="Status"
                       Margin="Margin.Dense"
                       AnchorOrigin="Origin.BottomCenter"
                       Clearable
                       Class="me-4 col-auto">
                @if (statusList.Count > 0)
                {
                    @foreach (var item in statusList)
                    {
                        <MudSelectItem T="int?" Value="item.ExamStatusId">@item.StatusContent</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" OnClick="GetData">Search</MudButton>
        </div>
        <div class="custom-box">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h4>Exam List</h4>
                </div>
            </div>
            <div>
                <MudTable T=LectureExamResponse Items="ExamList" FixedHeader="true" Height="@(ExamList.Count == 0 ? null : "380px")" Hover="true">
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Exam Code</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Head of Department</MudTh>
                        <MudTh>Planning Time </MudTh>
                        <MudTh>Review Start Date</MudTh>
                        <MudTh>Review End Date</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@((ExamList.IndexOf(@context) + 1))</MudTd>
                        <MudTd>@context.ExamCode</MudTd>
                        <MudTd>
                            <label class="fw-bold" style="color:@(ColorList[context.AssignStatusId.Value])">@context.AssignStatusContent</label>
                        </MudTd>
                        <MudTd>@context.HeadDepartmentName</MudTd>
                        <MudTd>@(context.EstimatedTimeTest.HasValue ? context.EstimatedTimeTest.Value.ToString("mm:HH yyyy-MM-dd") : "N/A")</MudTd>
                        <MudTd>@(context.StartDate.HasValue ? context.StartDate.Value.ToString("yyyy-MM-dd") : "N/A")</MudTd>
                        <MudTd>@(context.EndDate.HasValue ? context.EndDate.Value.ToString("yyyy-MM-dd") : "N/A")</MudTd>
                        <MudTd>
                            <div class="d-flex align-items-center justify-content-around">
                                <MudButton StartIcon="@Icons.Material.Filled.AssignmentInd" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => GoToDetail(context.ExamId))">Detail</MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
                @if (ExamList.Count == 0)
                {
                    <p class="text-center  fs-6 mt-4">No Data</p>
                }
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    public List<LectureExamResponse> ExamList = new List<LectureExamResponse>();

    public List<ExamStatus> statusList = new List<ExamStatus>();

    public ExamSearchRequest request = new();

    private Dictionary<int, string> ColorList = new Dictionary<int, string>
    {
        { 1, "#C0C0C0" }, // Not Assign
        { 2, "#FFD700" }, // Pending
        { 3, "#1E90FF" }, // Assigned
        { 4, "#FFA500" }, // Reviewed
        { 6, "#32CD32" }, // Faultless
        { 7, "#228B22" }, // Complete
        { 5, "#FF6347" }, // Erroneous
    };

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            request.UserId = userId;

            var response = await MenuServive.CheckAccess(userId, 5);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await GetData();

                var sList = await this.StatusServive.GetStatus();
                if (sList.IsSuccessful)
                {
                    statusList = sList.Items;
                }

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Exam Assign List";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task GetData()
    {
        var eList = await this.ExamServive.GetLectureExamList(request);
        if (eList.IsSuccessful)
        {
            ExamList = eList.Items;
        }
    }

    public void GoToDetail(int examId)
    {
        NavManager.NavigateTo($"/Lecture/ExamReport/{examId}");
    }
}