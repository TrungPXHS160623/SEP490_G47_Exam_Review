@page "/Lecture/ExamReport/{ExamId:int}"

<style>
    .image-placeholder {
        width: 200px;
        height: 200px;
        background-color: #f7f7f7;
        border: 1px solid #ddd;
        display: flex;
        justify-content: center;
        align-items: center;
        color: #888;
    }

        .image-placeholder img {
            max-width: 200px;
            max-height: 200px;
        }

    .split-row {
        display: flex;
        align-items: baseline;
    }

    .report-content {
        border-radius: 10px;
        border: 1px solid #d9d8d8;
        box-shadow: 0px 6px 10px -7px #7777;
    }
</style>
<div class="container">
    <div class="custom-box mb-5">
        <h2>Exam Detail</h2>
        <div class="split-row justify-content-evenly">
            <div class="col-4">
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Code:</label>
                    <MudText>@exam.ExamCode</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Subject Name:</label>
                    <MudText>@($"[{exam.SubjectCode}] {exam.SubjectName}")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Creater:</label>
                    <MudText>@(exam.CreaterName ?? "N/A")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Head of Department:</label>
                    <MudText>@(exam.HeadDepartmentName ?? "N/A")</MudText>
                </div>
            </div>
            <div class="col-6">
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Duration:</label>
                    <MudText>@exam.ExamDuration</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Type:</label>
                    <MudText>@exam.ExamType</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Estimate Date:</label>
                    <MudText>@(exam.StartDate.HasValue ? exam.StartDate.Value.ToString("dd-MM-yyyy") : "N/A")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Estimate Date:</label>
                    <MudText>@(exam.EndDate.HasValue ? exam.EndDate.Value.ToString("dd-MM-yyyy") : "N/A")</MudText>
                </div>
                @if (exam.AssignStatusId != 3)
                {
                    <div class="split-row mb-4">
                        <label class="col-4 text-end me-3">Exam Estimate Date:</label>
                        <MudText>@(exam.AssignmentDate.HasValue ? exam.AssignmentDate.Value.ToString("dd-MM-yyyy") : "N/A")</MudText>
                    </div>
                }
                else
                {
                    <div class="split-row mb-4">
                        <label class="col-4 text-end me-3">Exam Estimate Date: </label>
                        <div class="row">
                            <div class="col-7">
                                <MudDatePicker Converter="@ConvertDate("dd-MM-yyyy")"
                                               IsDateDisabledFunc="@((DateTime dt)=>(dt.Date > exam.EndDate?.Date) ||(dt < exam.StartDate?.Date))"
                                               @bind-Date="exam.AssignmentDate" DateFormat="dd-MM-yyyy" Placeholder="dd-mm-yyyy" Variant="Variant.Outlined"
                                               Margin="Margin.Dense" Required AnchorOrigin="Origin.BottomLeft" />
                            </div>
                            <div class="col-5">
                                <MudTimePicker AmPm="true" Time=exam.AssignmentDate?.TimeOfDay TimeChanged="@OnTimeChanged" AnchorOrigin="Origin.BottomLeft" Variant="Variant.Outlined" Margin="Margin.Dense" AutoClose="false"></MudTimePicker>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (exam.AssignStatusId == 3)
        {
            <MudButton Class="me-4" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveAssignDate">Save</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="GoBack">Back</MudButton>
        }
    </div>
    @if (exam.AssignmentDate != null && exam.AssignStatusId != 3)
    {
        <div class="custom-box">
            <h2 class="mb-4">Exam Report Detail</h2>
            @if (exam.ReportList.Count > 0)
            {
                @foreach (var item in exam.ReportList)
                {
                    <div class="report-content mb-4 p-4">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="col-2">
                                <MudTextField @bind-Value=item.QuestionNumber Label="Question Number" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            </div>
                            <div class="col-auto">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveReportRecord(item))" Color="Color.Error" Variant="Variant.Filled"></MudIconButton>
                            </div>
                        </div>
                        <div class="d-flex justify-content-between align-items-baseline mb-4">
                            <div style="width:49%">
                                <MudTextField @bind-Value=item.ReportContent Label="Issued" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="4" MaxLines="6"></MudTextField>
                            </div>
                            <div style="width:49%">
                                <MudTextField @bind-Value=item.QuestionSolutionDetail Label="Solution" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="4" MaxLines="6"></MudTextField>
                            </div>
                        </div>
                        @* <div class="mb-4">
            <div class="image-placeholder">
            <span>Image</span>
            </div>
            <input class="form-control mt-3" type="file" id="imageUpload" accept="image/png, image/jpeg">
            <small class="text-muted">PNG, JPG (recommended size: 200x200px)</small>
            </div> *@
                    </div>
                }
            }
            <MudButton Class="mb-4" StartIcon="@Icons.Material.Filled.NoteAdd" Color="Color.Success" Variant="Variant.Filled" OnClick="AddReportRecord">Add Report Content</MudButton>
            <div class="d-flex">
                <MudButton Class="me-4" StartIcon="@Icons.Material.Filled.NoteAdd" Color="Color.Default" Variant="Variant.Outlined" OnClick="@(() => Excute(false))">Save</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.NoteAdd" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => Excute(true))">Submit</MudButton>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int ExamId { get; set; }

    public LectureExamResponse exam = new LectureExamResponse();

    string text = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {

            var resp = await ExamServive.GetLectureExamById(ExamId);

            if (resp.IsSuccessful)
            {
                exam = resp.Item;

                if (exam.ReportList.Count == 0)
                {
                    exam.ReportList.Add(new ReportResponse());
                }
            }

            if (Layout != null)
            {
                Layout.Header = "Home";
                Layout.HeaderLink = "/Home";
                Layout.SubHeader = "Exam Assign List";
                Layout.RefreshLayout();
            }

        }
    }

    public void AddReportRecord()
    {
        exam.ReportList.Add(new ReportResponse());
    }

    public void RemoveReportRecord(ReportResponse data)
    {
        exam.ReportList.Remove(data);
    }

    public async Task Excute(bool isSubmit)
    {
        var resp = await this.ReportServive.AddEditReport(exam, isSubmit);

        if (resp.IsSuccessful)
        {
            if (isSubmit)
            {
                var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
                var user = auth.User;
                var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value!;


                var mailList = new List<MailUtil>
                {
                    new MailUtil{MailTo = exam.HeadDepartmentName}
                };

                var mailModel = new MailModel
                    {
                        Body = $"Giảng Viên {email.Replace("@fpt.edu.vn", string.Empty)} đã hoàn thành report test với mã đề là {exam.ExamCode}",
                        Subject = $"Hoàn thành Report môn {exam.SubjectName}",
                        MailList = mailList
                    };

                var sendMail = await this.MailServive.SendMail(mailModel);

            }

            NavManager.NavigateTo("/Lecture/ExamList");
        }
    }

    public async Task SaveAssignDate()
    {
        var resp = await this.AssignmentServive.SetAssignDate(exam);

        if (resp.IsSuccessful)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var email = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value!;


            var mailList = new List<MailUtil>
                {
                    new MailUtil{MailTo = exam.CreaterName}
                };

            var mailModel = new MailModel
                {
                    Body = $"Giảng Viên {email.Replace("@fpr.edu.vn", string.Empty)} đã chọn ngày để thực hiện test với mã đề là {exam.ExamCode} vào ngày {exam.AssignmentDate?.ToString("dd/MM/yyyy")}",
                    Subject = $"Xác nhận ngày test môn {exam.SubjectName}",
                    MailList = mailList
                };

            var sendMail = await this.MailServive.SendMail(mailModel);

            NavManager.NavigateTo("/Lecture/ExamList");
        }
    }

    MudBlazor.Converter<DateTime?, string> ConvertDate(string format)
    {
        return new()
            {
                GetFunc = (e) => DateTime.TryParse(e, out DateTime data) ? data : null,
                SetFunc = (e) => e?.ToString(format) ?? string.Empty
            };
    }

    public void GoBack()
    {
        NavManager.NavigateTo("/Lecture/ExamList");
    }

    public void OnTimeChanged(TimeSpan? value)
    {
        if (exam.AssignmentDate.HasValue)
        {
            exam.AssignmentDate = new DateTime(exam.AssignmentDate.Value.Year, exam.AssignmentDate.Value.Month, exam.AssignmentDate.Value.Day,
                                               value.Value.Hours, value.Value.Minutes, 0);
        }
    }
}
