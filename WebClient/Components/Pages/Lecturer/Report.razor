@page "/Lecture/ExamReport/{ExamId}"

<style>
    .image-placeholder {
        width: 100%;
        height: 200px;
        background-color: #f7f7f7;
        border: 1px solid #ddd;
        display: flex;
        justify-content: center;
        align-items: center;
        color: #888;
    }

        .image-placeholder img {
            max-width: 100%;
            max-height: 100%;
        }

    .split-row{
        display:flex;
        justify-content:space-between;
        align-items:center;
    }

    .report-content{
        border-bottom: 1px solid rgba(0,0,0,0.5);
    }
</style>
<div class="container">
    <div class="custom-box">
        <h2>Exam Detail</h2>
        <div class="split-row">
            <div>
                <div class="split-row mb-4">
                <label class="col-3">Exam Code:</label>
                    <MudText>@exam.ExamCode</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-3">Subject Name:</label>
                    <MudText>@($"[{exam.SubjectCode}] {exam.SubjectName}")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-3">Exam Creater:</label>
                    <MudText>@(exam.CreaterName ?? "N/A")</MudText>
                </div>
                <div class="fsplit-row mb-4">
                    <label class="col-3">Head of Department:</label>
                    <MudText>@(exam.HeadDepartmentName ?? "N/A")</MudText>
                </div>
             </div>
             <div>
                 <div class="split-row mb-4">
                     <label class="col-3">Status:</label>
                     <MudText>@exam.ExamStatusContent</MudText>
                 </div>
                 <div class="split-row mb-4">
                     <label class="col-3">Campus:</label>
                     <MudText>@exam.CampusName</MudText>
                 </div>
                    <div class="split-row mb-4">
                     <label class="col-3">Exam Duration:</label>
                     <MudText>@exam.ExamDuration</MudText>
                 </div>
                 <div class="split-row mb-4">
                     <label class="col-3">Exam Type:</label>
                     <MudText>@exam.ExamType</MudText>
                 </div>

                @if(exam.AssignmentDate != null)
                {
                    <div class="split-row mb-4">
                        <label class="col-3">Exam Estimate Date:</label>
                        <MudText>@(exam.AssignmentDate.HasValue ? exam.AssignmentDate.Value.ToString("dd-MM-yyyy") : "N/A")</MudText>
                    </div>
                } else
                {
                    <div class="form-group mb-4">
                        <label class="col-3">Exam Estimate Date: </label>
                        <MudDatePicker Converter="@ConvertDate("dd-MM-yyyy")"
                                       IsDateDisabledFunc="@((DateTime dt)=>(dt.Date > exam.EndDate?.Date) ||(dt < exam.StartDate?.Date))"
                                       @bind-Date="exam.AssignmentDate" DateFormat="dd-MM-yyyy" Placeholder="dd-mm-yyyy" Variant="Variant.Outlined"
                                       Margin="Margin.Dense" Clearable Required />
                     </div>
                }
             </div>
        </div>
        @if (exam.AssignmentDate == null)
        {
            <MudIconButton Class="me-4" Icon="@Icons.Material.Filled.NoteAdd" OnClick="SaveAssignDate">Save</MudIconButton>
        }
    </div>
    @if(exam.AssignmentDate != null)
    {
        <div class="custom-box">
            <h2>Exam Report Content</h2>
            @if (exam.ReportList.Count > 0)
            {
                @foreach (var item in exam.ReportList)
                {
                    <div class="report-content">
                        <div class="d-flex justify-content-between align-items-center">
                            <MudTextField @bind-Value=item.QuestionNumber Label="Question Number" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveReportRecord(item))"></MudIconButton>
                        </div>
                        <div class="d-flex justify-content-between align-items-baseline">
                            <MudTextField @bind-Value=item.ReportContent Label="Issued" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="2" MaxLines="4" Class="col-5"></MudTextField>
                            <MudTextField @bind-Value=item.QuestionSolutionDetail Label="Solution" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="2" MaxLines="4"></MudTextField>
                        </div>
                        <div>
                            <div class="image-placeholder">
                                <span>Image</span>
                            </div>
                            <input class="form-control mt-3" type="file" id="imageUpload" accept="image/png, image/jpeg">
                            <small class="text-muted">PNG, JPG (recommended size: 740x415px)</small>
                        </div>
                    </div>
                }
            }
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="AddReportRecord">Add Report Content</MudIconButton>
            <div class="d-flex">
                <MudIconButton Class="me-4" Icon="@Icons.Material.Filled.NoteAdd" OnClick="AddReportRecord">Save</MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="AddReportRecord">Submit</MudIconButton>
            </div>
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int ExamId { get; set; }

    public LectureExamResponse exam = new LectureExamResponse();

    string text = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;


            var response = await MenuServive.CheckAccess(userId, 4);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                var resp = await ExamServive.GetLectureExamById(ExamId);

                if (resp.IsSuccessful)
                {
                    exam = resp.Item;

                    if(exam.ReportList.Count == 0)
                    {
                        exam.ReportList.Add(new ReportResponse());
                    }
                }

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Exam Assign List";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    public void AddReportRecord()
    {
        exam.ReportList.Add(new ReportResponse());
    }

    public void RemoveReportRecord(ReportResponse data)
    {
        exam.ReportList.Remove(data);
    }

    public async Task Excute(bool isSubmit)
    {
        var resp = await this.ReportServive.AddEditReport(exam);

        if (resp.IsSuccessful)
        {
            if (isSubmit)
            {

            }

            NavManager.NavigateTo("/Lecture/ExamList");
        }
    }

    public async Task SaveAssignDate()
    {
        var resp = await this.AssignmentServive.SetAssignDate(exam);

        if (resp.IsSuccessful)
        {
            NavManager.NavigateTo("/Lecture/ExamList");
        }
    }

    MudBlazor.Converter<DateTime?, string> ConvertDate(string format)
    {
        return new()
            {
                GetFunc = (e) => DateTime.TryParse(e, out DateTime data) ? data : null,
                SetFunc = (e) => e?.ToString(format) ?? string.Empty
            };
    }
}
