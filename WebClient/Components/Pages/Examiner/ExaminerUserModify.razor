@page "/Examiner/EditUser/{UserId:int}"
@page "/Examiner/AddUser"
@if (!isAddOrEdit)
{
      <h1 style="text-align: center;">Update HeadDepartment</h1>
}
else
{
    <h1 style="text-align: center;">Add HeadDepartment</h1>
}
<div class="d-flex justify-content-center">
    <EditForm Model="user" OnValidSubmit="HandleValidSubmit" class="border p-4" style="width: 450px;">
        <FluentValidationValidator />
        <div class="mb-4 d-flex align-items-baseline">
            <label class="col-4 text-end me-4">Email:</label>
            <div class="col-8">
                @if (!isAddOrEdit)
                {
                    <MudText>@(user.Email + "@fpt.edu.vn")</MudText>
                }
                else
                {
                    <MudTextField @bind-Value="user.Email" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="@("@fpt.edu.vn")" For="@(() => user.Email)" />
                }
            </div>
        </div>


        <div class="mb-4 d-flex align-items-baseline">
            <label class="col-4 text-end me-4">User Name:</label>
            <div class="col-8">
                @if (!isAddOrEdit)
                {
                    <MudText>@(user.UserName)</MudText>
                }
                else
                {
                    <MudTextField @bind-Value="user.UserName" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" For="@(() => user.Email)" />
                }
            </div>
        </div>

        <div class="mb-4 d-flex align-items-baseline">
            <label class="col-4 text-end me-4">Phone Number:</label>
            <div class="col-8">
                @if (!isAddOrEdit)
                {
                    <MudText>@(user.Phone)</MudText>
                }
                else
                {
                    <MudTextField @bind-Value="user.Phone" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" For="@(() => user.Email)" />
                }
            </div>
        </div>
        <div class="mb-4 row">
            <label class="col-4 text-end">Department:</label>
            <div class="col-8">
                <MudSelect T="FacutyResponse"
                           @bind-SelectedValues=@user.FacutyResponse
                           Text="@("Number of Subject : " + user.FacutyResponse.Count())"
                           MultiSelection="true"
                           Variant="Variant.Outlined"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           ReadOnly=@(!isAddOrEdit)
                           HelperText="Only display avaliable subject">
                    @if (facutyResponses.Count() > 0)
                    {
                        @foreach (var item in facutyResponses)
                        {
                            <MudSelectItem T="FacutyResponse" Value="@item">@($"[{item.FacultyName}] ")</MudSelectItem>
                        }
                    }
                </MudSelect>
                <span class="mt-2 text-nowrap">@(string.Join(", ", user.FacutyResponse.Select(x => $"[{x.FacultyName}]")))</span>
            </div>
        </div>

        <div class="mb-4 d-flex align-items-center">
            <label class="col-4 text-end me-4">Active:</label>
            <div class="col-8">
                <MudCheckBox @bind-Value="user.IsActive" Disabled="@(!isAddOrEdit )" />
            </div>
        </div>

        <div class="d-flex justify-content-evenly">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Update</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
        </div>
    </EditForm>
</div>


 @code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int? UserId { get; set; }

    private UserSubjectRequest user = new();
    private List<UserRole> roleList = new();
    private List<FacutyResponse> facutyResponses = new();

    private bool isAddOrEdit { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuService.CheckAccess(userId, 10);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                if (UserId != null)
                {
                    await FetchUserDetails();
                    await GetFacutyList();

                }
                else
                {
                    isAddOrEdit = true;
                }

                await GetRoles();

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "User Management";
                    Layout.SubHeader1 = UserId != null ? "Edit User" : "Add User";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task FetchUserDetails()
    {
        var result = await UserService.GetUserFacutyByIdAsync(UserId.Value);
        if (result != null)
        {
            user = result.Item;
        }
    }

    private async Task GetFacutyList()
    {
        var result = await FacultyService.GetFacutyByRole(user.RoleId.Value, user.UserId, user.CampusId.Value);
        if (result != null)
        {
            facutyResponses = result.Items;
        }
    }

    private async Task HandleValidSubmit()
    {
        RequestResponse resp = new();

        if (UserId != null && isAddOrEdit == false)
        {
            isAddOrEdit = true;
        }
        else if (UserId != null && isAddOrEdit == true)
        {
            resp = await UserService.ExaminerUpdateUserAsync(user);
        }
        else
        {
            resp = await UserService.CreateAsync(user);
        }
        if (resp.IsSuccessful)
        {
            NavManager.NavigateTo("/Examiner/HeadDeparmentManagement");
        }
    }

    private async Task GetRoles()
    {
        var result = await RoleService.GetRolesForExaminer();
        if (result != null)
        {
            roleList = result.Items;
        }
    }

    private void Cancel()
    {
        if (UserId != null && isAddOrEdit == true)
        {
            isAddOrEdit = false;
        }
        else
        {
            NavManager.NavigateTo("/Examiner/HeadDeparmentManagement");
        }
    }
}

