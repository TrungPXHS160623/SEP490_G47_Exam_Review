@page "/Examiner/EditUser/{UserId:int}"
@page "/Examiner/AddUser"

<EditForm Model="user" OnValidSubmit="HandleValidSubmit" style="width:17%">
    <div class="d-flex align-items-center justify-content-between mb-4">
        <label class="col-2">Email:</label>
        <div >
            @if (!isAddOrEdit)
            {
                <MudText>@(user.Email + "@fpt.edu.vn")</MudText>
            }
            else
            {
                <MudTextField @bind-Value="user.Email" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="@("@fpt.edu.vn")" />
            }
        </div>
    </div>
    <div class="d-flex align-items-center justify-content-between mb-4">
        <label class="col-2">Role:</label>
        <div class="col-auto">
            @if (!isAddOrEdit)
            {
                <MudText>@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName ?? "N/A")</MudText>
            }
            else
            {
                <MudSelect @bind-Value="user.RoleId"
                           Text="@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName)"
                           Variant="Variant.Outlined"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           Disabled="IsCurrentId">

                    @if (roleList.Count > 0)
                    {
                        @foreach (var item in roleList)
                        {
                            <MudSelectItem T="int?" Value="@item.RoleId">@item.RoleName</MudSelectItem>
                        }
                    }
                </MudSelect>
            }
        </div>
    </div>
    <div class="d-flex align-items-center justify-content-between mb-4">
        <label class="col-2">Subject:</label>
        <div class="col-auto">
            @if (!isAddOrEdit)
            {
                <MudText>@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName ?? "N/A")</MudText>
            }
            else
            {
                <MudSelect @bind-Value="user.RoleId"
                           Text="@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName)"
                           Variant="Variant.Outlined"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           Disabled="IsCurrentId">

                    @if (roleList.Count > 0)
                    {
                        @foreach (var item in roleList)
                        {
                            <MudSelectItem T="int?" Value="@item.RoleId">@item.RoleName</MudSelectItem>
                        }
                    }
                </MudSelect>
            }
        </div>
    </div>
    <div class="d-flex align-items-center justify-content-between mb-4">
        <label class="col-2">Campus:</label>
        <div class="col-auto">

            <MudText>@user.CampusName</MudText>

        </div>
    </div>
        <div class="d-flex align-items-center justify-content-between mb-4">
        <label class="col-2">Active:</label>
        <div class="col-auto">
            <MudCheckBox @bind-Value="user.IsActive" Disabled />
        </div>
    </div>
    <div>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(UserId != null ? (isAddOrEdit ? "Save" : "Update") : (isAddOrEdit ? "Create" : null))</MudButton>
        <MudButton Variant="@(UserId != null && isAddOrEdit == true ? Variant.Outlined : Variant.Filled)"
                   Color="@(UserId != null && isAddOrEdit == true ? Color.Error : Color.Default)"
                   OnClick="Cancel" Class="ms-4">
            @(UserId != null && isAddOrEdit == true ? "Cancel" : "Back")
        </MudButton>
    </div>
</EditForm>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int? UserId { get; set; }

    private UserSubjectRequest user = new();

    private List<UserRole> roleList = new();

    private List<UserRole> subjectList = new();

    private bool isAddOrEdit { get; set; } = false;

    private bool IsCurrentId { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuServive.CheckAccess(userId, 7);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                if (UserId != null)
                {
                    await FetchUserDetails();

                    IsCurrentId = userId == UserId;
                }
                else
                {
                    isAddOrEdit = true;
                }

                await GetRoles();

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "User Management";
                    Layout.SubHeader1 = UserId != null ? "Edit User" : "Add User";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task FetchUserDetails()
    {
        var result = await AccountService.GetUserSubjectByIdAsync(UserId.Value);
        if (result != null)
        {
            user = result.Item;
        }
    }

    private async Task HandleValidSubmit()
    {
        RequestResponse resp = new();

        if (UserId != null && isAddOrEdit == false)
        {
            isAddOrEdit = true;
        }
        else if (UserId != null && isAddOrEdit == true)
        {
            resp = await AccountService.UpdateAsync(user);
        }
        else
        {
            resp = await AccountService.CreateAsync(user);
        }

        if (resp.IsSuccessful)
        {
            NavManager.NavigateTo("/Examiner/usermanagement");
        }
    }

    private async Task GetRoles()
    {
        var result = await RoleServive.GetRolesForExaminer();
        if (result != null)
        {
            roleList = result.Items;
        }
    }

    private void Cancel()
    {
        if (UserId != null && isAddOrEdit == true)
        {
            isAddOrEdit = false;
        }
        else
        {
            NavManager.NavigateTo("/Examiner/usermanagement");
        }
    }
}

