@page "/Examiner/EditUser/{UserId:int}"
@page "/Examiner/AddUser"
<h1 style="text-align: center;">User Modify</h1>
<div class="d-flex justify-content-center">
    <EditForm Model="user" OnValidSubmit="HandleValidSubmit" class="border p-4" style="width: 400px;">
        <FluentValidationValidator />
        <div class="mb-4 row">
            <label class="col-4 text-end">Email:</label>
            <div class="col-8">
                @if (!isAddOrEdit)
                {
                    <MudText>@(user.Email + "@fpt.edu.vn")</MudText>
                }
                else
                {
                    <MudTextField @bind-Value="user.Email" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="@("@fpt.edu.vn")" For="@(() => user.Email)" />
                }
            </div>
        </div>

        <div class="mb-4 row">
            <label class="col-4 text-end">Role:</label>
            <div class="col-8">
                @if (!isAddOrEdit)
                {
                    <MudText>@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName ?? "N/A")</MudText>
                }
                else
                {
                        <MudSelect @bind-Value="user.RoleId"
                                   Text="@(roleList.FirstOrDefault(x => x.RoleId == user.RoleId)?.RoleName)"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   AnchorOrigin="Origin.BottomCenter">

                            @if (roleList.Count > 0)
                            {
                                @foreach (var item in roleList)
                                {
                                    <MudSelectItem T="int?" Value="@item.RoleId">@item.RoleName</MudSelectItem>
                                }
                            }
                        </MudSelect>
                }
                </div>
      
        </div>
        <div class="mb-4 row">
            <label class="col-4 text-end">Subject:</label>
            <div class="col-8">
                <MudSelect T="SubjectResponse"
                           @bind-SelectedValues=@user.SubjectResponses
                           Text="@("Number of Subject : " + user.SubjectResponses.Count())"
                           MultiSelection="true"
                           Variant="Variant.Outlined"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           ReadOnly=@(!isAddOrEdit)
                           HelperText="Only display avaliable subject">
                    @if (subjectList.Count() > 0)
                    {
                        @foreach (var item in subjectList)
                        {
                            <MudSelectItem T="SubjectResponse" Value="@item">@($"[{item.SubjectCode}] {item.SubjectName}")</MudSelectItem>
                        }
                    }
                </MudSelect>
                <span class="mt-2 text-nowrap">@(string.Join(", ", user.SubjectResponses.Select(x => $"[{x.SubjectCode}]")))</span>
            </div>
        </div>
        <div class="mb-4 row">
            <div class="col-8">
             <label class="col-4 text-end">Active:</label>
            <div>
                <MudCheckBox @bind-Value="user.IsActive" Disabled />
            </div>
            </div>
        </div>
        <div>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">@(UserId != null ? (isAddOrEdit ? "Save" : "Update") : (isAddOrEdit ? "Create" : null))</MudButton>
            <MudButton Variant="@(UserId != null && isAddOrEdit == true ? Variant.Outlined : Variant.Filled)"
                       Color="@(UserId != null && isAddOrEdit == true ? Color.Error : Color.Default)"
                       OnClick="Cancel" Class="ms-4">
                @(UserId != null && isAddOrEdit == true ? "Cancel" : "Back")
            </MudButton>
        </div>
    </EditForm>
    </div>



 @code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int? UserId { get; set; }

    private UserSubjectRequest user = new();

    private List<UserRole> roleList = new();

    private List<SubjectResponse> subjectList = new();

    private bool isAddOrEdit { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuServive.CheckAccess(userId, 10);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                if (UserId != null)
                {
                    await FetchUserDetails();

                    await GetSubjectList();

                }
                else
                {
                    isAddOrEdit = true;
                }

                await GetRoles();

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "User Management";
                    Layout.SubHeader1 = UserId != null ? "Edit User" : "Add User";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task FetchUserDetails()
    {
        var result = await AccountService.GetUserSubjectByIdAsync(UserId.Value);
        if (result != null)
        {
            user = result.Item;
        }
    }

    private async Task GetSubjectList()
    {
        var result = await SubjectServive.GetSubjectByRole(user.RoleId.Value, user.UserId, user.CampusId.Value);
        if (result != null)
        {
            subjectList = result.Items;
        }
    }

    private async Task HandleValidSubmit()
    {
        RequestResponse resp = new();

        if (UserId != null && isAddOrEdit == false)
        {
            isAddOrEdit = true;
        }
        else if (UserId != null && isAddOrEdit == true)
        {
            resp = await AccountService.ExaminerUpdateUserAsync(user);
        }

        if (resp.IsSuccessful)
        {
            NavManager.NavigateTo("/Examiner/usermanagement");
        }
    }

    private async Task GetRoles()
    {
        var result = await RoleServive.GetRolesForExaminer();
        if (result != null)
        {
            roleList = result.Items;
        }
    }

    private void Cancel()
    {
        if (UserId != null && isAddOrEdit == true)
        {
            isAddOrEdit = false;
        }
        else
        {
            NavManager.NavigateTo("/Examiner/usermanagement");
        }
    }
}

