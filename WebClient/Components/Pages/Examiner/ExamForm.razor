@page "/Examiner/CreateForm"
<h1 style="text-align: center;">Add Exam</h1>
@inject NavigationManager Navigation
<div class="d-flex justify-content-center">
    <EditForm Model="exam" class="border p-4" style="width: 600px;">

        <FluentValidationValidator />

        <!-- Exam Code -->
        <div class="mb-4 row">
            <label class="col-4 text-end">Exam Code:</label>
            <div class="col-8">
                <MudTextField @bind-Value="exam.ExamCode" Variant="Variant.Outlined" Margin="Margin.Dense"
                              Placeholder="Enter Exam Code" Required RequiredError="This field is required." />
            </div>
        </div>

        <!-- Subject Name -->
        <div class="mb-4 row">
            <label class="col-4 text-end">Subject Name:</label>
            <div class="col-8">
                <MudSelect T="int?" @bind-Value="exam.SubjectId" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Placeholder="Choose Subject" Required RequiredError="This field is required.">
                    @foreach (var item in subList)
                    {
                        <MudSelectItem T="int?" Value="@item.SubjectId">@($"[{item.SubjectCode}] {item.SubjectName}")</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>

  
        <!-- Exam Duration -->
        <div class="mb-4 row">
            <label class="col-4 text-end">Exam Duration:</label>
            <div class="col-8">
                <MudSelect @bind-Value="exam.ExamDuration" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Placeholder="Choose Exam TermDuration" Required RequiredError="This field is required.">
                    <MudSelectItem T="string" Value="@("60")">60</MudSelectItem>
                    <MudSelectItem T="string" Value="@("90")">90</MudSelectItem>
                </MudSelect>
            </div>
        </div>
        <!-- Exam Term Duration -->
        <div class="mb-4 row">
            <label class="col-4 text-end">Exam TermDuration:</label>
            <div class="col-8">
                <MudSelect @bind-Value="exam.TermDuration" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Placeholder="Choose Exam TermDuration" Required RequiredError="This field is required.">
                    <MudSelectItem T="string" Value="@("Block 10 (10 weeks)")">Block 10 (10 weeks)</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Block 5 (5 weeks)")">Block 5 (5 weeks)</MudSelectItem>
                </MudSelect>
            </div>
        </div>

        <!-- Exam Type -->
        <div class="mb-4 row">
            <label class="col-4 text-end">Exam Type:</label>
            <div class="col-8">
                <MudSelect @bind-Value="exam.ExamType" Variant="Variant.Outlined" Margin="Margin.Dense"
                           Placeholder="Choose Exam Type" Required RequiredError="This field is required.">
                    <MudSelectItem T="string" Value="@("Other")">Other</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Listening")">Listening</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Writing")">Writing</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Speaking")">Speaking</MudSelectItem>
                    <MudSelectItem T="string" Value="@("Practice Exam")">Practice Exam</MudSelectItem>
                </MudSelect>
            </div>
        </div>

        <!-- Start Date -->
        <div class="mb-4 row">
            <label class="col-4 text-end">Start Review Date:</label>
            <div class="col-8">
                <MudDatePicker @bind-Date="exam.StartDate" DateFormat="dd-MM-yyyy"
                               Placeholder="dd-mm-yyyy" Variant="Variant.Outlined"
                               Margin="Margin.Dense" Required RequiredError="This field is required." />
            </div>
        </div>

        <!-- End Date -->
        <div class="mb-4 row">
            <label class="col-4 text-end">End Review Date:</label>
            <div class="col-8">
                <MudDatePicker @bind-Date="exam.EndDate" DateFormat="dd-MM-yyyy"
                               Placeholder="dd-mm-yyyy" Variant="Variant.Outlined"
                               Margin="Margin.Dense" Required RequiredError="This field is required." />
            </div>
        </div>

        <!-- Buttons -->
        <div class="d-flex justify-content-between">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@_processing">
                @if (_processing)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    <MudText>Saving</MudText>
                }
                else
                {
                    <MudText>Save</MudText>
                }
            </MudButton>

        </div>
    </EditForm>
    </div>


@code {
    EditForm _refForm;
    private bool _processing = false;

    private ExaminerExamResponse exam = new ExaminerExamResponse();
    private List<Campus> camList = new();
    private List<Subject> subList = new();

    protected override async Task OnInitializedAsync()
    {
        var resp = await SubjectServive.GetSubjects();
        if (resp.IsSuccessful) subList = resp.Items;

        var result = await CampusServive.GetCampus();
        if (result.IsSuccessful) camList = result.Items;
    }

    private async Task Excute()
    {
        _processing = true;

        var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        if (auth.User.Identity.IsAuthenticated)
        {
            var userId = int.TryParse(auth.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;
            var req = new ExamCreateRequest
                {
                    ExamCode = exam.ExamCode,
                    CampusId = exam.CampusId,
                    CreaterId = userId,
                    EndDate = exam.EndDate,
                    StartDate = exam.StartDate,
                    EstimatedTimeTest = exam.EstimatedTimeTest,
                    ExamDuration = exam.ExamDuration,
                    ExamType = exam.ExamType,
                    SubjectId = exam.SubjectId
                };

            var resp = await ExamServive.CreateExam(req);
            if (resp.IsSuccessful) Navigation.NavigateTo("/exams");
        }

        _processing = false;
    }
}
