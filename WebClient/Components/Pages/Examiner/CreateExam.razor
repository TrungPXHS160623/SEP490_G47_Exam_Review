@page "/Examiner/CreateExam"
<h1 style="text-align: center;">Create Exam</h1>
<style>
    .mud-table-cell {
        border: none !important;
        text-align: center;
    }

    .mud-table-head .mud-table-row .mud-table-cell {
        border-bottom: 1px solid grey !important;
        font-size: 1.2rem;
    }

    .mud-table {
        box-shadow: none !important;
    }

    .mud-table-root {
        border-collapse: separate !important;
        border-spacing: 0 !important;
    }

    .mud-table-head .mud-table-row {
        box-shadow: 0 5px 10px #e1e5ee;
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 99;
    }
</style>
<div class ="d-flex justify-content-center">
    <div class="mt-4">
        <div class="d-flex mb-4">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       OnClick="OpenImportDialogAsync">
                Import Exam
            </MudButton>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       Class="ms-4"
                       OnClick="NavigateToCreatePage">
                Add Exam
            </MudButton>
        </div>

    </div>
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    IList<IBrowserFile> _files = new List<IBrowserFile>();

    public List<ExaminerExamResponse> ExamList = new List<ExaminerExamResponse>();

    private HashSet<ExaminerExamResponse> selectedExams = new HashSet<ExaminerExamResponse>();

    public List<ExamStatus> statusList = new List<ExamStatus>();

    public ExamSearchRequest request = new();

    private Dictionary<int, string> ColorList = new Dictionary<int, string>
    {
        { 1, "#D3D3D3" }, // Unassigned
        { 2, "#87CEEB" }, // Assigned
        { 3, "#FFD700" }, // Awaiting Lecturer Confirm
        { 4, "#6495ED" }, // Reviewing
        { 5, "#FF4500" }, // Error
        { 6, "#32CD32" }, // OK
        { 7, "#006400" }, // Completed
        { 8, "#DC143C" }  // Discard
    };

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuService.CheckAccess(userId, 11);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await GetData();

                var sList = await this.StatusService.GetStatus();
                if (sList.IsSuccessful)
                {
                    statusList = sList.Items;
                }

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Create Exam";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private void NavigateToCreatePage()
    {
        NavManager.NavigateTo("/Examiner/CreateForm");
    }

    private async Task OpenImportDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<ImportExam>();

        var dialog = await DialogService.ShowAsync<ImportExam>("Import Exam", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetData();
        }
    }

    private void UploadFiles(IBrowserFile file)
    {
        _files.Clear();
        _files.Add(file);
    }

    private async Task GetData()
    {
        var eList = await this.ExamService.GetExamList(request);
        if (eList.IsSuccessful)
        {
            ExamList = eList.Items;
        }
        selectedExams.Clear();
    }

    private async Task AssignExam()
    {
        if (selectedExams.Count > 0)
        {
            var msg = CheckSelectedExam();

            if (msg.Length == 0)
            {
                var mailList = selectedExams.GroupBy(x => x.HeadDepartmentName).Select(x => x.Key).ToList();

                List<MailUtil> list = new();

                foreach (var item in mailList)
                {
                    var mail = new MailUtil
                        {
                            MailTo = item
                        };
                    list.Add(mail);
                }

                var mailModel = new MailModel
                    {
                        Body = "Đề thi đã được khảo thí chuyển cho các chủ nhiệm bộ môn. Chủ nhiệm bộ môn thực hiện việc assign cho các giảng viên để thực hiện test đề thi",
                        MailList = list,
                        Subject = "Assign đề thi cho chủ nhiệm bộ môn"
                    };

                var resp = await this.ExamService.ChangeStatusExam(selectedExams.ToList());

                if (resp.IsSuccessful)
                {
                    var result = await this.MailService.SendMail(mailModel);
                    await GetData();
                }
            }
            else
            {
                foreach (var item in msg)
                {
                    Snackbar.Add(item, Severity.Warning);
                }
            }
        }
    }

    public string[] CheckSelectedExam()
    {
        List<string> errors = new List<string>();

        var examsWithWrongStatus = selectedExams.Where(x => x.ExamStatusId != 1).ToList();
        foreach (var exam in examsWithWrongStatus)
        {
            errors.Add($"Exam {exam.ExamCode} is already assigned. Cannot Re-Assign!");
        }

        var examsWithMissingDates = selectedExams.Where(x => x.EndDate == null || x.StartDate == null).ToList();
        foreach (var exam in examsWithMissingDates)
        {
            errors.Add($"Exam {exam.ExamCode} has Start Date or End Date not chosen yet.");
        }

        var examsWithMissingHead = selectedExams.Where(x => x.HeadDepartmentId == null).ToList();
        foreach (var exam in examsWithMissingHead)
        {
            errors.Add($"Exam {exam.ExamCode} has no subject leader yet.");
        }

        return errors.ToArray();
    }
    private async Task ExportAllExams()
    {
        var response = await this.ExamService.ExportAllExams();

        if (response != null && response.IsSuccessful)
        {
            try
            {
                using var stream = new MemoryStream(response.Item);
                var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(stream.ToArray())}";
                await js.InvokeVoidAsync("open", fileUrl);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error during file download: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Error exporting exams.", Severity.Error);
        }
    }


}