@page "/HeadDepartment/LecturerManagement"

@inject HttpClient Http
<h1 style="text-align: center;" class="mb-4">Lecturer Management</h1>
<style>
    td {
        vertical-align: middle
    }
</style>
<div class="d-flex justify-content-center">
    <div class="w-75 custom-box">
        <h5 class="text-center mb-4 mt-4">List of lecturers currently teaching the subjects you oversee.</h5>
        <div class="d-flex align-items-center justify-content-between mt-4 mb-4">
            <div class="col me-4">
                <MudTextField @bind-Value="searchText" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable></MudTextField>
             </div>
             <div class="me-4">
                 <button class="btn btn-success me-3" @onclick="FetchUsers">Search</button>
             </div>
             <div class="me-4">
                 <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="AddNewUser">Add New Lecturer</MudButton>
             </div>
             <div class="me-4">
                 <MudButton Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.CloudUpload"
                            OnClick="OpenImportDialogAsync">
                     Import Lecturer
                 </MudButton>
             </div>
         </div>

         @if (users.Count > 0)
        {
            <table class="table table-striped table-bordered text-center">
                <!-- Center table content -->
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Email</th>
                        <th>Name</th>
                        <th>Phone Number</th>
                        <th>Is Active</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (users != null)
                    {
                        @foreach (var user in users)
                        {
                            <tr>
                                <td>@(users.IndexOf(user) + 1)</td>
                                <td>
                                    <div class="text-info" @onclick="() => ViewUserDetail(user.UserId)" style="cursor:pointer;">@user.Email</div>
                                </td>
                                <td>@user.UserName</td>
                                <td>@user.Tel</td>
                                <td class="d-flex justify-content-center">
                                    <MudCheckBox @bind-Value="@user.IsActive" Disabled></MudCheckBox>
                                 </td>
                                 <td>
                                     <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" @onclick="() => DeleteUser(user.UserId)">Delete</MudButton>
                                 </td>
                             </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <span class="text-danger">No data found.</span>
        }
    </div>
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    private List<UserResponse> users = new List<UserResponse>();

    private string searchText;

    private int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            UserId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            var response = await MenuService.CheckAccess(UserId, 12);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await FetchUsers();

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Lecturer Management";
                    Layout.SubHeader1 = string.Empty;
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private void AddNewUser()
    {
        NavManager.NavigateTo($"/HeadDepartment/AddUser");
    }

    private async Task OpenImportDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<ImportUser>();

        var dialog = await DialogService.ShowAsync<ImportUser>("Import Lecturer", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await FetchUsers();
        }
    }

    private async Task FetchUsers()
    {
        var response = await UserService.GetLectureListByHead(UserId);
        if (response.IsSuccessful)
        {
            users = response.Items;
        }
    }

    private async Task DeleteUser(int UserId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
            };

        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Content, "Are you sure want to delete this account?" },
            { x => x.BtnTextConfirm, "Delete" },
            { x => x.BtnTextCancel, "Cancel" },
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Delete Account", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var currentUserId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            if (currentUserId == UserId)
            {
                this.Snackbar.Add("You cannot delete your current account", Severity.Warning);
            }
            else
            {
                var response = await UserService.DeleteAsync(UserId);
                if (response.IsSuccessful)
                {
                    await FetchUsers();
                }
            }
        }
    }

    private void ViewUserDetail(int userId)
    {
        NavManager.NavigateTo($"/HeadDepartment/EditLecturer/{userId}");
    }

}
