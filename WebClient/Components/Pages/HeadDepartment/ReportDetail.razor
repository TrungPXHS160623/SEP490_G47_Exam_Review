@page "/HeadDepartment/ExamReport/{ExamId:int}"

<div class="container">
    <div class="custom-box mb-5">
        <h2>Exam Detail</h2>
        <div class="split-row justify-content-evenly">
            <div class="col-4">
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Code:</label>
                    <MudText>@exam.ExamCode</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Subject Name:</label>
                    <MudText>@($"[{exam.SubjectCode}] {exam.SubjectName}")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Head of Department:</label>
                    <MudText>@(exam.HeadDepartmentName ?? "N/A")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Duration:</label>
                    <MudText>@exam.ExamDuration Minutes</MudText>
                </div>
            </div>
            <div class="col-6">
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Exam Type:</label>
                    <MudText>@exam.ExamType</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Test Plan:</label>
                        <MudText>@(exam.AssignmentDate.HasValue ? exam.AssignmentDate.Value.ToString("mm:HH dd-MM-yyyy") : "N/A")</MudText>
                </div>
                <div class="split-row mb-4">
                    <label class="col-4 text-end me-3">Lecture Test:</label>
                    <MudText>@exam.AssignmentUserName</MudText>
                </div>
            </div>
        </div>
        <MudButton Color="Color.Default" Variant="Variant.Filled" OnClick="GoBack">Back</MudButton>

    </div>

    <div class="custom-box">
        <h2 class="mb-4">Exam Report Detail</h2>
        <div class="split-row mb-4">
            <label class="me-3">Exam Conclusion:</label>
            <MudText>@exam.AssignStatusContent</MudText>
        </div>
        @if (exam.ReportList.Count > 0)
        {
            @foreach (var item in exam.ReportList)
            {
                <div class="report-content mb-4 p-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <div class="col-2">
                            <MudTextField @bind-Value=item.QuestionNumber Label="Question Number" Variant="Variant.Outlined" Margin="Margin.Dense" ReadOnly></MudTextField>
                        </div>
                    </div>
                    <div class="d-flex justify-content-between align-items-baseline mb-4">
                        <div style="width:49%">
                            <MudTextField @bind-Value=item.ReportContent Label="Issued" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="4" MaxLines="4" ReadOnly></MudTextField>
                        </div>
                        <div style="width:49%">
                            <MudTextField @bind-Value=item.QuestionSolutionDetail Label="Solution" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="4" MaxLines="4" ReadOnly></MudTextField>
                        </div>
                    </div>
                     <div class="mb-4 d-flex align-items-center flex-wrap">
                         @if (item.ImageList.Count > 0)
                        {
                            foreach (var image in item.ImageList)
                            {
                                <div class="img-preview col-auto mb-2 me-2">
                                    <img src="@image.FileData" @onclick="() => OpenImageDialog(image.FileData)" />
                                </div>
                            }
                        }
                     </div>
                </div>
            }
        }
        <div class="report-content mb-4 p-4">
            <MudTextField @bind-Value="exam.TestTimeInMinute" 
                          Label="Test Time(Minutes)"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Type="Numeric"
                          Required="true"
                          Style="width: 150px;"
                          ReadOnly />
            <MudTextField @bind-Value=exam.Summary Label="Summary" Variant="Variant.Outlined" Margin="Margin.Dense" Lines="4" MaxLines="4" ReadOnly></MudTextField>
        </div>
        @if (exam.AssignStatusId != 7 && exam.AssignStatusId != 8)
        {
            <div>
                <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => ConfirmationDialog(exam.ExamId,true))">Approved</MudButton>
                <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => ConfirmationDialog(exam.ExamId,false))">Rejected</MudButton>
            </div>
        }
    </div>

</div>

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    [Parameter]
    public int ExamId { get; set; }

    public LectureExamResponse exam = new LectureExamResponse();

    public int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {

            await GetReport();

            if (Layout != null)
            {
                Layout.Header = "Home";
                Layout.HeaderLink = "/Home";
                Layout.SubHeader = "Exam Report List";
                Layout.SubHeader1 = "Exam Report Detail";
                Layout.RefreshLayout();
            }

        }
    }

    MudBlazor.Converter<DateTime?, string> ConvertDate(string format)
    {
        return new()
            {
                GetFunc = (e) => DateTime.TryParse(e, out DateTime data) ? data : null,
                SetFunc = (e) => e?.ToString(format) ?? string.Empty
            };
    }

    public void GoBack()
    {
        NavManager.NavigateTo("/HeadDepartment/Report");
    }

    public async Task GetReport()
    {
        var resp = await ExamService.GetLectureExamById(ExamId);

        if (resp.IsSuccessful)
        {
            exam = resp.Item;
        }
    }

    public async void OnSelectedValueChanged(int value)
    {
        UserId = value;

        await GetReport();

        this.StateHasChanged();
    }

    private async Task ConfirmationDialog(int examId, bool isOk)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
            };

        string msg = isOk ? "Are you sure this exam is ready to use? This cannot be changed after confirmation." : "Are you sure this exam cannot be fixed and will be removed? This cannot be changed after confirmation.";

        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Content, msg },
            { x => x.BtnTextConfirm, "Confirm" },
            { x => x.BtnTextCancel, "Cancel" },
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Confirmation Exam", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var resp = await this.ExamService.ChangeStatusExamById(examId, isOk ? 7 : 8);

            if (resp.IsSuccessful)
            {
                NavManager.NavigateTo("/HeadDepartment/Report");
            }
        }

    }

    private async Task OpenImageDialog(string image)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.ExtraExtraLarge,
                BackdropClick = true,
            };

        var parameters = new DialogParameters<ImageDialog>
        {
            { x => x.selectedImage, image },
        };

        var dialog = await DialogService.ShowAsync<ImageDialog>(string.Empty, parameters, options);
    }
}
