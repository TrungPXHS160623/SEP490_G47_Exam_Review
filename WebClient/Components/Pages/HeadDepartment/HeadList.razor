@page "/HeadDepartment/ExamList"
<h1 style="text-align: center;">Assign Teacher To Review</h1>
<style>
    .mud-table-cell {
        border: none !important;
        text-align: center;
    }

    .mud-table-head .mud-table-row .mud-table-cell {
        border-bottom: 1px solid grey !important;
        font-size: 1.2rem;
    }

    .mud-table {
        box-shadow: none !important;
    }

    .mud-table-root {
        border-collapse: separate !important;
        border-spacing: 0 !important;
    }

    .mud-table-head .mud-table-row {
        box-shadow: 0 5px 10px #e1e5ee;
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 99;
    }
</style>

<div class="d-flex justify-content-center">
    <div class="mt-4">
        <div class="d-flex align-items-center flex-wrap custom-box mb-4">
            <div class="col me-4">
                <MudTextField @bind-Value="request.ExamCode" Label="Exam Code" Variant="Variant.Outlined" Margin="Margin.Dense" Clearable></MudTextField>
            </div>
            <div class="me-4 col-2">
                <MudSelect @bind-Value="request.StatusId"
                           Variant="Variant.Outlined"
                           Label="Status"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           Clearable>
                    @if (statusList.Count > 0)
                    {
                        @foreach (var item in statusList)
                        {
                            <MudSelectItem T="int?" Value="item.ExamStatusId">@item.StatusContent</MudSelectItem>
                        }
                    }

                </MudSelect>
            </div>
            <div class="col-2 me-4">
                <MudSelect @bind-Value="request.SemesterId"
                           Variant="Variant.Outlined"
                           Label="Semester"
                           Margin="Margin.Dense"
                           AnchorOrigin="Origin.BottomCenter"
                           Clearable>
                    @if (semesters.Count > 0)
                    {
                        @foreach (var item in semesters)
                        {
                            <MudSelectItem T="int?" Value="item.SemesterId">@item.SemesterName</MudSelectItem>
                        }
                    }
                </MudSelect>
            </div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" OnClick="GetData">Search</MudButton>
        </div>
        <div class="custom-box">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <h4>Exam List</h4>
                </div>
            </div>
            <div>
                <MudTable T=LeaderExamResponse Items="ExamList" FixedHeader="true" Height="@(ExamList.Count == 0 ? null : "380px")" Hover="true">
                    <HeaderContent>
                        <MudTh>No</MudTh>
                        <MudTh>Exam Code</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Exam Date</MudTh>
                        <MudTh>Review Start Date</MudTh>
                        <MudTh>Review End Date</MudTh>
                        <MudTh>Semester</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@(ExamList.IndexOf(context) + 1)</MudTd>
                        <MudTd>@context.ExamCode</MudTd>
                        <MudTd>
                            <label class="fw-bold" style="color:@(ColorList[context.ExamStatusId.Value])">@context.ExamStatusContent</label>
                        </MudTd>
                        <MudTd>@(context.ExamDate.HasValue ? context.ExamDate.Value.ToString("yyyy-MM-dd") : "N/A")</MudTd>
                        <MudTd>@(context.StartDate.HasValue ? context.StartDate.Value.ToString("yyyy-MM-dd") : "N/A")</MudTd>
                        <MudTd>@(context.EndDate.HasValue ? context.EndDate.Value.ToString("yyyy-MM-dd") : "N/A")</MudTd>
                        <MudTd>@context.SemesterName</MudTd>
                        <MudTd>
                            <div class="d-flex align-items-center justify-content-around">
                                <MudButton StartIcon="@Icons.Material.Filled.AssignmentInd" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => OpenAddEditDialogAsync(context.ExamId))">Assign</MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                    @*<PagerContent>
                    @if (AccList.Count > 10)
                    {
                    <MudTablePager />
                    }
                    </PagerContent> *@
                </MudTable>
                @if (ExamList.Count == 0)

                {
                    <p class="text-center fs-6 mt-4">No Data</p>
                }
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    public List<LeaderExamResponse> ExamList = new List<LeaderExamResponse>();
    public List<Semester> semesters = new List<Semester>();
    public List<ExamStatus> statusList = new List<ExamStatus>();

    public ExamSearchRequest request = new();

    private Dictionary<int, string> ColorList = new Dictionary<int, string>
    {
        { 1, "#D3D3D3" }, // Unassigned
        { 2, "#87CEEB" }, // Assigned
        { 3, "#FFD700" }, // Awaiting Lecturer Confirm
        { 4, "#6495ED" }, // Reviewing
        { 5, "#FF4500" }, // Error
        { 6, "#32CD32" }, // OK
        { 7, "#006400" }, // Completed
        { 8, "#DC143C" }  // Discard
    };

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            request.UserId = userId;

            var response = await MenuServive.CheckAccess(userId, 4);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await GetData();

                var sList = await this.StatusServive.GetStatus();
                if (sList.IsSuccessful)
                {
                    statusList = sList.Items.Where(x => x.ExamStatusId == 2 || x.ExamStatusId == 3).ToList();
                }

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Exam Assign List";
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task OpenAddEditDialogAsync(int examId, bool isView = true)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<ExamDetail>
        {
            {x => x.ExamId,examId}
        };

        var dialog = await DialogService.ShowAsync<ExamDetail>(examId == 0 ? "Exam Create" : "Exam Detail", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetData();
        }
    }

    private async Task GetData()
    {
        var eList = await this.ExamServive.GetLeaderExamList(request);
        if (eList.IsSuccessful)
        {
            var semesterrList = await this.SemesterService.GetSemester();
            if (semesterrList.IsSuccessful)
            {
                semesters = semesterrList.Items;
            }
            ExamList = eList.Items
                           .Where(e => e.ExamDate.HasValue && (e.ExamStatusId == 2 || e.ExamStatusId == 3))
                           .OrderBy(e => e.ExamDate.Value >= DateTime.Now ? e.ExamDate.Value : DateTime.MaxValue)
                           .ToList();

        }
    }
}