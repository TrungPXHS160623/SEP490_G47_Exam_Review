@page "/HeadDepartment/Report"

<style>
    .mud-table-cell {
        border: none !important;
        text-align: center;
    }

    .mud-table-head .mud-table-row .mud-table-cell {
        border-bottom: 1px solid grey !important;
        font-size: 1.2rem;
    }

    .mud-table {
        box-shadow: none !important;
    }

    .mud-table-root {
        border-collapse: separate !important;
        border-spacing: 0 !important;
    }

    .mud-table-head .mud-table-row {
        box-shadow: 0 5px 10px #e1e5ee;
        position: sticky;
        top: 0;
        background-color: white;
        z-index: 99;
    }
</style>
<div class="d-flex justify-content-center">
    <div class="mt-4">
        <div class="d-flex align-items-center flex-wrap custom-box mb-4">
            <MudTextField @bind-Value="request.ExamCode" Label="Exam Code" Variant="Variant.Outlined" Margin="Margin.Dense" Class="me-4" Clearable></MudTextField>
            <MudSelect @bind-Value="request.StatusId"
                       Variant="Variant.Outlined"
                       Label="Status"
                       Margin="Margin.Dense"
                       AnchorOrigin="Origin.BottomCenter"
                       Clearable
                       Class="me-4 col-auto">
                @if (statusList.Count > 0)
                {
                    @foreach (var item in statusList)
                    {
                        <MudSelectItem T="int?" Value="item.ExamStatusId">@item.StatusContent</MudSelectItem>
                    }
                }
            </MudSelect>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Search" OnClick="GetData">Search</MudButton>
        </div>

        <div class="custom-box">
            <div class="d-flex align-items-center">
                <div>
                    <h4>Report List</h4>
                </div>
            </div>
            <div>
                <MudTable T=LeaderExamResponse Items="ExamList" FixedHeader="true" Height="400px" Hover="true">
                    <HeaderContent>
                        <MudTh>Exam Code</MudTh>
                        <MudTh>Campus</MudTh>
                        <MudTh>Status</MudTh>
                        <MudTh>Lecture Asigned</MudTh>
                        <MudTh>Assignment Date</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.ExamCode</MudTd>
                        <MudTd>@context.CampusName</MudTd>
                        <MudTd>
                            <label class="fw-bold" style="color:@(ColorList[context.ExamStatusId.Value])">@context.ExamStatusContent</label>
                        </MudTd>
                        <MudTd>@context.HeadDepartmentName</MudTd>
                        <MudTd>@(context.EstimatedTimeTest.HasValue ? context.EstimatedTimeTest.Value.ToString("dd-MM-yyyy") : "N/A")</MudTd>
                        <MudTd>
                            <div class="d-flex align-items-center justify-content-around">
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@(context.ExamStatusId != 5)" OnClick="@(() => GoToDetail(context.ExamId))">Report</MudButton>
                            </div>
                        </MudTd>
                    </RowTemplate>
                    @*<PagerContent>
                    @if (AccList.Count > 10)
                    {
                    <MudTablePager />
                    }
                    </PagerContent> *@
                </MudTable>
                @if (ExamList.Count == 0)
                {
                    <p class="text-center  fs-6 mt-4">No Data</p>
                }
            </div>
        </div>
    </div>
</div>
@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    public List<LeaderExamResponse> ExamList = new List<LeaderExamResponse>();

    public List<ExamStatus> statusList = new List<ExamStatus>();

    public ExamSearchRequest request = new();

    private Dictionary<int, string> ColorList = new Dictionary<int, string>
    {
        { 1, "#C0C0C0" }, // Not Assign
        { 2, "#FFD700" }, // Pending
        { 3, "#1E90FF" }, // Assigned
        { 4, "#FFA500" }, // Reviewed
        { 6, "#32CD32" }, // Faultless
        { 7, "#228B22" }, // Complete
        { 5, "#FF6347" }, // Erroneous
    };

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await CustomAuthStateProvider.IsUserAuthenticated();

        if (isAuthenticated)
        {
            var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
            var user = auth.User;
            var userId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value, out var id) ? id : 0;

            request.UserId = userId;

            var response = await MenuServive.CheckAccess(userId, 6);

            if (!response.IsSuccessful)
            {
                NavManager.NavigateTo("/404");
            }
            else
            {
                await GetData();

                var sList = await this.StatusServive.GetStatus();
                if (sList.IsSuccessful)
                {
                    //statusList = sList.Items;
                }

                if (Layout != null)
                {
                    Layout.Header = "Home";
                    Layout.HeaderLink = "/Home";
                    Layout.SubHeader = "Exam Report List";
                    Layout.SubHeader1 = string.Empty;
                    Layout.RefreshLayout();
                }
            }
        }
    }

    private async Task OpenAddEditDialogAsync(int examId, bool isView = true)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<ExamDetail>
        {
            {x => x.ExamId,examId}
        };

        var dialog = await DialogService.ShowAsync<ExamDetail>(examId == 0 ? "Exam Create" : "Exam Detail", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetData();
        }
    }

    private async Task GetData()
    {
        var eList = await this.ExamServive.GetLeaderExamList(request);
        if (eList.IsSuccessful)
        {
            ExamList = eList.Items;
        }
    }

    private async Task AssignExam()
    {

    }

    public void GoToDetail(int examId)
    {
        NavManager.NavigateTo($"/HeadDepartment/ExamReport/{examId}");
    }
}