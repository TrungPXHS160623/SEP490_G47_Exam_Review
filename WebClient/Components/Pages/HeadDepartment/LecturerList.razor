<MudDialog>
    <DialogContent>
        <div>
            <MudButton Color="Color.Tertiary" OnClick="@(() => ModifyLecturer(0))" Class="btn btn-block" Variant="Variant.Filled">Add Lecturer</MudButton>
        </div>
        <div>
            <MudTable Items="UserList" FixedHeader="true" Height="380px" Hover="true">
                <HeaderContent>
                    <MudTh>No</MudTh>
                    <MudTh>Mail</MudTh>
                    <MudTh>Full Name</MudTh>
                    <MudTh>Mail Fe</MudTh>
                    <MudTh>Phone Number</MudTh>
                    <MudTh>Number of Exams Planed</MudTh>
                    <MudTh>Action</MudTh>
                    <MudTh>Assign Lecturer</MudTh>
                </HeaderContent>
                <RowTemplate Context="item">
                    <MudTd>@(UserList.IndexOf(item) + 1)</MudTd>
                    <MudTd>@item.Email</MudTd>
                    <MudTd>@item.UserName</MudTd>
                    <MudTd>@item.FeEmail</MudTd>
                    <MudTd>@item.Tel</MudTd>
                    <MudTd>@item.AssignedExamCount</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Filled" @onclick="() => ModifyLecturer(item.UserId)"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" @onclick="() => RemoveLecturer(item.UserId)"></MudIconButton>
                    </MudTd>
                    <MudTd>
                            <MudButton Icon="@Icons.Material.Filled.Check"
                                       Color="@((item.IsSelect) ? Color.Success : Color.Default)"
                                       Size="Size.Large"
                                       Variant="Variant.Filled"
                                       OnClick="@(() => AssignLecturer(item.UserId))">
                            </MudButton>
                    </MudTd>

                </RowTemplate>
            </MudTable>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error" OnClick="Cancel" Class="col-3 btn btn-block" Variant="Variant.Outlined">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private AddLecturerSubjectRequest user = new();
    [Parameter]
    public int SubjectId { get; set; }

    private void Submit() => MudDialog.Close(DialogResult.Ok(true));

    private void Cancel() => MudDialog.Cancel();

    public List<UserResponse> UserList = new();

    protected override async Task OnInitializedAsync()
    {
        await GetLecturer();

    }

    public async Task GetLecturer()
    {
        var auth = await CustomAuthStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var campusId = int.TryParse(user.Claims.FirstOrDefault(c => c.Type == "CampusId")?.Value, out var id) ? id : 0;

        var resp = await this.UserService.GetUserBySubject(SubjectId, id);

        if (resp.IsSuccessful)
        {
            UserList = resp.Items;
        }
    }
    public async Task AssignLecturer(int userId)
    {
      
        user.UserId = userId;
        user.SubjectId = SubjectId;
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
            };

        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Content, "Are you sure want to assign this lecturer to this subject?" },
            { x => x.BtnTextConfirm, "Assign" },
            { x => x.BtnTextCancel, "Cancel" },
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Assign lecturer", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var resp = await this.AssignmentService.AssignSubjectToLecture(user);
           
            if (resp.IsSuccessful)
            {
                await GetLecturer();
            }
        }
        foreach (var item in UserList)
        {
            item.IsSelect = (item.UserId == userId);
        }
    }
    public async Task ModifyLecturer(int userId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,

            };

        var parameters = new DialogParameters<AddLecturerDialog>
        {
            {x => x.SubjectId,SubjectId},
            {x => x.LecturerId,userId},
        };

        var dialog = await DialogService.ShowAsync<AddLecturerDialog>($"Manage Lecturer", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await GetLecturer();
        }
    }

    public async Task RemoveLecturer(int userId)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
            };

        var parameters = new DialogParameters<Dialog>
        {
            { x => x.Content, "Are you sure want to remove this lecturer from this subject?" },
            { x => x.BtnTextConfirm, "Remove" },
            { x => x.BtnTextCancel, "Cancel" },
        };

        var dialog = await DialogService.ShowAsync<Dialog>("Remove lecturer", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var resp = await this.UserService.RemoveLecture(userId, SubjectId);

            if (resp.IsSuccessful)
            {
                await GetLecturer();
            }
        }
    }
}
