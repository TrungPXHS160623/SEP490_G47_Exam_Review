@using Microsoft.AspNetCore.Hosting
<style>
    .form-group {
        display: flex;
        align-items: center;
    }

    .mud-input.mud-disabled {
        background-color: rgba(0, 0, 0, 0.1);
        color: black;
    }
</style>
<MudDialog>
    <DialogContent>
        <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                       @ref="@_fileUpload"
                       OnFilesChanged="OnInputFileChanged"
                       AppendMultipleFiles
                       Hidden="@false"
                       InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                       InputStyle="opacity:0"
                       Accept=".xlsx"
                       MaximumFileCount="1"
                       tabindex="-1"
                       @ondrop="@ClearDragClass"
                       @ondragenter="@SetDragClass"
                       @ondragleave="@ClearDragClass"
                       @ondragend="@ClearDragClass">
            <ActivatorContent>
                <MudPaper Height="300px"
                          Outlined="true"
                          Class="@_dragClass">
                    <MudText Typo="Typo.h6">
                        Drag and drop files here or click
                    </MudText>
                    @foreach (var file in _fileNames)
                    {
                        <MudChip T="string"
                                 Color="Color.Dark"
                                 Text="@file"
                                 tabindex="-1" />
                    }
                </MudPaper>
            </ActivatorContent>
        </MudFileUpload>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" class="btn btn-block col-3" Variant="Variant.Filled" OnClick="Excute" Disabled="@_processing">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Saving</MudText>
            }
            else
            {
                <MudText>Import</MudText>
            }
        </MudButton>
        <MudButton Color="Color.Default" Href="/Template/SampleImportSubject.xlsx" Class="col-auto btn btn-block" Variant="Variant.Filled">Download template</MudButton>
        <MudButton Color="Color.Error" OnClick="Cancel" Class="col-3 btn btn-block" Variant="Variant.Outlined">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int? ExamId { get; set; }

     private IList<IBrowserFile> files = new List<IBrowserFile>();

    private bool _processing = false;
    private readonly List<string> _fileNames = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private void Cancel() => MudDialog.Cancel();

    public async Task Excute()
    {
        _processing = true;
      
            await UploadFilesAsync();
       
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        files = e.GetMultipleFiles().ToList();
        _fileNames.Clear();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private async Task UploadFilesAsync()
    {
        var file = files.FirstOrDefault(); // Take only the first file

        if (file == null)
        {
            Snackbar.Add("No files to upload!", Severity.Warning);
            return;
        }

        try
        {
            // Call the service method with the single file
            var response = await SubjectService.ImportSubjectFromExcel(file);

            if (response.IsSuccessful)
            {
                Snackbar.Add("Subjects imported successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to upload the subject file.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error during file upload: {ex.Message}", Severity.Error);
        }
    }

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;

    private void SetDragClass() => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass() => _dragClass = DefaultDragClass;
}

