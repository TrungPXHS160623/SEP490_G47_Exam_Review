// <auto-generated />
using System;
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(QuizManagementContext))]
    [Migration("20240926030831_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"));

                    b.Property<string>("CampusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampusId");

                    b.ToTable("Campuses");

                    b.HasData(
                        new
                        {
                            CampusId = 1,
                            CampusName = "Hanoi",
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9536),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9549)
                        },
                        new
                        {
                            CampusId = 2,
                            CampusName = "Ho Chi Minh",
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9552),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9552)
                        });
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreaterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedTimeTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExamDuration")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ExamStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ExamType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamId");

                    b.HasIndex(new[] { "CampusId" }, "IX_Exams_CampusId");

                    b.HasIndex(new[] { "CreaterId" }, "IX_Exams_CreaterId");

                    b.HasIndex(new[] { "ExamStatusId" }, "IX_Exams_ExamStatusId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Exams_SubjectId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9825),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9825),
                            EstimatedTimeTest = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9823),
                            ExamCode = "EXAM001",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Essay",
                            StartDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9824),
                            SubjectId = 1,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9827)
                        },
                        new
                        {
                            ExamId = 2,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9831),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9830),
                            EstimatedTimeTest = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9829),
                            ExamCode = "EXAM002",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9830),
                            SubjectId = 2,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9831)
                        },
                        new
                        {
                            ExamId = 3,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9836),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9835),
                            EstimatedTimeTest = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9833),
                            ExamCode = "EXAM003",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9835),
                            SubjectId = 3,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9836)
                        });
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Property<int>("ExamStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamStatusId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamStatusId");

                    b.ToTable("ExamStatuses");

                    b.HasData(
                        new
                        {
                            ExamStatusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9653),
                            StatusContent = "Not started",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9655)
                        },
                        new
                        {
                            ExamStatusId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9656),
                            StatusContent = "In progress",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9657)
                        },
                        new
                        {
                            ExamStatusId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9658),
                            StatusContent = "Completed",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9658)
                        },
                        new
                        {
                            ExamStatusId = 4,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9660),
                            StatusContent = "Cancelled",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9660)
                        });
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex(new[] { "AssignedUserId" }, "IX_InstructorAssignments_AssignedTo");

                    b.HasIndex(new[] { "ExamId" }, "IX_InstructorAssignments_ExamId");

                    b.ToTable("InstructorAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssignedUserId = 3,
                            AssignmentDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9855),
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9856),
                            ExamId = 1,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9858)
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssignedUserId = 3,
                            AssignmentDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9859),
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9859),
                            ExamId = 2,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9860)
                        });
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsProgram")
                        .HasColumnType("bit");

                    b.Property<string>("MenuLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9878),
                            MenuLink = "/usermanagement",
                            MenuName = "User management",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9879)
                        },
                        new
                        {
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9881),
                            MenuLink = "/Admin/History",
                            MenuName = "History",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9881)
                        },
                        new
                        {
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9882),
                            MenuLink = "/TestDepartment/ExamList",
                            MenuName = "Exam List",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9883)
                        },
                        new
                        {
                            MenuId = 4,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9884),
                            MenuLink = "/HeadDepartment/ExamList",
                            MenuName = "Head Department List",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9885)
                        },
                        new
                        {
                            MenuId = 5,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9886),
                            MenuLink = "/Lecture/ExamList",
                            MenuName = "Lecture List",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9886)
                        });
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex(new[] { "MenuId" }, "IX_MenuRoles_MenuId");

                    b.ToTable("MenuRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9909),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9910)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9911),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9912)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9913),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9913)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 4,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9915),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9915)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 5,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9916),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9917)
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9917),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9918)
                        },
                        new
                        {
                            RoleId = 3,
                            MenuId = 4,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9919),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9919)
                        },
                        new
                        {
                            RoleId = 4,
                            MenuId = 5,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9920),
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9921)
                        });
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionSolutionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex(new[] { "ExamId" }, "IX_Reports_ExamId");

                    b.HasIndex(new[] { "UserId" }, "IX_Reports_UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9946),
                            ExamId = 1,
                            QuestionNumber = 1,
                            QuestionSolutionDetail = "Solution explanation 1",
                            ReportContent = "Report 1",
                            Score = 90f,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9946),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9948),
                            ExamId = 2,
                            QuestionNumber = 2,
                            QuestionSolutionDetail = "Solution explanation 2",
                            ReportContent = "Report 2",
                            Score = 85f,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9949),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9950),
                            ExamId = 3,
                            QuestionNumber = 3,
                            QuestionSolutionDetail = "Solution explanation 3",
                            ReportContent = "Report 3",
                            Score = 75f,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9951),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeadOfDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId");

                    b.HasIndex(new[] { "HeadOfDepartmentId" }, "IX_Subjects_DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9793),
                            HeadOfDepartmentId = 1,
                            SubjectCode = "PRN231",
                            SubjectName = "C# Programming",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9794)
                        },
                        new
                        {
                            SubjectId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9795),
                            HeadOfDepartmentId = 1,
                            SubjectCode = "CSI123",
                            SubjectName = "Computer Science",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9795)
                        },
                        new
                        {
                            SubjectId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9797),
                            HeadOfDepartmentId = 2,
                            SubjectCode = "MLN123",
                            SubjectName = "Machine Learning",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9797)
                        });
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "CampusId" }, "IX_Users_CampusId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9723),
                            IsActive = true,
                            Mail = "admin@fpt.edu.vn",
                            RoleId = 1,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9723)
                        },
                        new
                        {
                            UserId = 2,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9728),
                            IsActive = true,
                            Mail = "examiner@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9729)
                        },
                        new
                        {
                            UserId = 3,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9757),
                            IsActive = true,
                            Mail = "lecturer@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9757)
                        },
                        new
                        {
                            UserId = 4,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9760),
                            IsActive = true,
                            Mail = "head@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9761)
                        },
                        new
                        {
                            UserId = 5,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9763),
                            IsActive = true,
                            Mail = "developer@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9763)
                        },
                        new
                        {
                            UserId = 6,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9765),
                            IsActive = true,
                            Mail = "trunghp@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9766)
                        });
                });

            modelBuilder.Entity("Library.Models.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LogDt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserHistory", (string)null);
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9685),
                            RoleName = "Admin",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9685)
                        },
                        new
                        {
                            RoleId = 2,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9687),
                            RoleName = "Examiner",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9687)
                        },
                        new
                        {
                            RoleId = 3,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9689),
                            RoleName = "Lecturer",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9689)
                        },
                        new
                        {
                            RoleId = 4,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9691),
                            RoleName = "Head of Department",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9691)
                        },
                        new
                        {
                            RoleId = 5,
                            CreateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9693),
                            RoleName = "Program Developer",
                            UpdateDate = new DateTime(2024, 9, 26, 10, 8, 30, 958, DateTimeKind.Local).AddTicks(9693)
                        });
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("Exams")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.User", "Creater")
                        .WithMany("Exams")
                        .HasForeignKey("CreaterId")
                        .IsRequired();

                    b.HasOne("Library.Models.ExamStatus", "ExamStatus")
                        .WithMany("Exams")
                        .HasForeignKey("ExamStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Creater");

                    b.Navigation("ExamStatus");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.HasOne("Library.Models.User", "AssignedUser")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("AssignedUserId")
                        .IsRequired()
                        .HasConstraintName("FK_InstructorAssignments_Users_AssignedTo");

                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.HasOne("Library.Models.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("Reports")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.HasOne("Library.Models.User", "HeadOfDepartment")
                        .WithMany("Subjects")
                        .HasForeignKey("HeadOfDepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_Subjects_Users");

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("Users")
                        .HasForeignKey("CampusId");

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Campus");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.UserHistory", b =>
                {
                    b.HasOne("Library.Models.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserHistory_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Navigation("InstructorAssignments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("InstructorAssignments");

                    b.Navigation("Reports");

                    b.Navigation("Subjects");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
