// <auto-generated />
using System;
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(QuizManagementContext))]
    partial class QuizManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"));

                    b.Property<string>("CampusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampusId");

                    b.ToTable("Campuses");

                    b.HasData(
                        new
                        {
                            CampusId = 1,
                            CampusName = "Hanoi",
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5580),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5593)
                        },
                        new
                        {
                            CampusId = 2,
                            CampusName = "Ho Chi Minh",
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5594),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5595)
                        });
                });

            modelBuilder.Entity("Library.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("HeadOfDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex(new[] { "HeadOfDepartmentId" }, "IX_Departments_HeadOfDepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5870),
                            DepartmentName = "Information Technology",
                            HeadOfDepartmentId = 4,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5871)
                        },
                        new
                        {
                            DepartmentId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5873),
                            DepartmentName = "Data Science",
                            HeadOfDepartmentId = 6,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5873)
                        });
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreaterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedTimeTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExamDuration")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("ExamStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ExamStatusId");

                    b.Property<string>("ExamType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamId");

                    b.HasIndex(new[] { "CreaterId" }, "IX_Exams_CreaterId");

                    b.HasIndex(new[] { "ExamStatusId" }, "IX_Exams_ExamStatusId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Exams_SubjectId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5923),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5923),
                            EstimatedTimeTest = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5921),
                            ExamCode = "EXAM001",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Essay",
                            StartDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5922),
                            SubjectId = 1,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5924)
                        },
                        new
                        {
                            ExamId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5959),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5959),
                            EstimatedTimeTest = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5957),
                            ExamCode = "EXAM002",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5958),
                            SubjectId = 2,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5960)
                        },
                        new
                        {
                            ExamId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5964),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5963),
                            EstimatedTimeTest = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5962),
                            ExamCode = "EXAM003",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5963),
                            SubjectId = 3,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5964)
                        });
                });

            modelBuilder.Entity("Library.Models.ExamAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex(new[] { "AssignedBy" }, "IX_ExamAssignments_AssignedBy");

                    b.HasIndex(new[] { "AssignedTo" }, "IX_ExamAssignments_AssignedTo");

                    b.HasIndex(new[] { "ExamId" }, "IX_ExamAssignments_ExamId");

                    b.ToTable("ExamAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssignedBy = 2,
                            AssignedTo = 1,
                            AssignmentDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5986),
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5987),
                            ExamId = 1,
                            Status = "Pending",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5988)
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssignedBy = 2,
                            AssignedTo = 2,
                            AssignmentDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5990),
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5990),
                            ExamId = 2,
                            Status = "Assigned",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5991)
                        },
                        new
                        {
                            AssignmentId = 3,
                            AssignedBy = 2,
                            AssignedTo = 2,
                            AssignmentDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5992),
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5993),
                            ExamId = 3,
                            Status = "Assigned",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5993)
                        });
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Property<int>("ExamStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExamStatusId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamStatusId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamStatusId");

                    b.ToTable("ExamStatuses");

                    b.HasData(
                        new
                        {
                            ExamStatusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5762),
                            StatusContent = "Not started",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5764)
                        },
                        new
                        {
                            ExamStatusId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5765),
                            StatusContent = "In progress",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5766)
                        },
                        new
                        {
                            ExamStatusId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5767),
                            StatusContent = "Completed",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5768)
                        },
                        new
                        {
                            ExamStatusId = 4,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5769),
                            StatusContent = "Cancelled",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5770)
                        });
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex(new[] { "AssignedTo" }, "IX_InstructorAssignments_AssignedTo");

                    b.HasIndex(new[] { "ExamId" }, "IX_InstructorAssignments_ExamId");

                    b.ToTable("InstructorAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssignedTo = 3,
                            AssignmentDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6013),
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6014),
                            ExamId = 1,
                            Status = "Pending",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6015)
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssignedTo = 3,
                            AssignmentDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6016),
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6017),
                            ExamId = 2,
                            Status = "Assigned",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6018)
                        });
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6040),
                            MenuName = "Dashboard",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6041)
                        },
                        new
                        {
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6042),
                            MenuName = "Exam Management",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6042)
                        },
                        new
                        {
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6044),
                            MenuName = "User Management",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6044)
                        });
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex(new[] { "MenuId" }, "IX_MenuRoles_MenuId");

                    b.ToTable("MenuRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6063),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6064)
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6066),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6066)
                        },
                        new
                        {
                            RoleId = 3,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6068),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6068)
                        },
                        new
                        {
                            RoleId = 4,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6069),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6070)
                        },
                        new
                        {
                            RoleId = 5,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6071),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6072)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6073),
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6074)
                        });
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionSolutionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex(new[] { "ExamId" }, "IX_Reports_ExamId");

                    b.HasIndex(new[] { "UserId" }, "IX_Reports_UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6094),
                            ExamId = 1,
                            QuestionNumber = 1,
                            QuestionSolutionDetail = "Solution explanation 1",
                            ReportContent = "Report 1",
                            Score = 90f,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6095),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6097),
                            ExamId = 2,
                            QuestionNumber = 2,
                            QuestionSolutionDetail = "Solution explanation 2",
                            ReportContent = "Report 2",
                            Score = 85f,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6098),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6099),
                            ExamId = 3,
                            QuestionNumber = 3,
                            QuestionSolutionDetail = "Solution explanation 3",
                            ReportContent = "Report 3",
                            Score = 75f,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(6100),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Subjects_DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5895),
                            DepartmentId = 1,
                            SubjectName = "C# Programming",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5895)
                        },
                        new
                        {
                            SubjectId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5897),
                            DepartmentId = 1,
                            SubjectName = "Computer Science",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5897)
                        },
                        new
                        {
                            SubjectId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5899),
                            DepartmentId = 2,
                            SubjectName = "Machine Learning",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5900)
                        });
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "CampusId" }, "IX_Users_CampusId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5831),
                            IsActive = true,
                            Mail = "admin@fpt.edu.vn",
                            RoleId = 1,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5832)
                        },
                        new
                        {
                            UserId = 2,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5835),
                            IsActive = true,
                            Mail = "examiner@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5835)
                        },
                        new
                        {
                            UserId = 3,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5837),
                            IsActive = true,
                            Mail = "lecturer@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5838)
                        },
                        new
                        {
                            UserId = 4,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5840),
                            IsActive = true,
                            Mail = "head@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5841)
                        },
                        new
                        {
                            UserId = 5,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5843),
                            IsActive = true,
                            Mail = "developer@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5844)
                        },
                        new
                        {
                            UserId = 6,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5847),
                            IsActive = true,
                            Mail = "trunghp@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5847)
                        });
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5793),
                            RoleName = "Admin",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5794)
                        },
                        new
                        {
                            RoleId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5795),
                            RoleName = "Examiner",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5796)
                        },
                        new
                        {
                            RoleId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5797),
                            RoleName = "Lecturer",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5799)
                        },
                        new
                        {
                            RoleId = 4,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5800),
                            RoleName = "Head of Department",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5800)
                        },
                        new
                        {
                            RoleId = 5,
                            CreateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5802),
                            RoleName = "Program Developer",
                            UpdateDate = new DateTime(2024, 9, 24, 20, 54, 5, 914, DateTimeKind.Local).AddTicks(5802)
                        });
                });

            modelBuilder.Entity("Library.Models.Department", b =>
                {
                    b.HasOne("Library.Models.User", "HeadOfDepartment")
                        .WithMany("Departments")
                        .HasForeignKey("HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.HasOne("Library.Models.User", "Creater")
                        .WithMany("Exams")
                        .HasForeignKey("CreaterId")
                        .IsRequired();

                    b.HasOne("Library.Models.ExamStatus", "ExamStatus")
                        .WithMany("Exams")
                        .HasForeignKey("ExamStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creater");

                    b.Navigation("ExamStatus");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Library.Models.ExamAssignment", b =>
                {
                    b.HasOne("Library.Models.User", "AssignedByNavigation")
                        .WithMany("ExamAssignments")
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.Department", "AssignedToNavigation")
                        .WithMany("ExamAssignments")
                        .HasForeignKey("AssignedTo")
                        .IsRequired();

                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("ExamAssignments")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.HasOne("Library.Models.User", "AssignedToNavigation")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("AssignedTo")
                        .IsRequired();

                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.Navigation("AssignedToNavigation");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.HasOne("Library.Models.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("Reports")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.HasOne("Library.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("Users")
                        .HasForeignKey("CampusId");

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Campus");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Models.Department", b =>
                {
                    b.Navigation("ExamAssignments");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Navigation("ExamAssignments");

                    b.Navigation("InstructorAssignments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("ExamAssignments");

                    b.Navigation("Exams");

                    b.Navigation("InstructorAssignments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
