// <auto-generated />
using System;
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(QuizManagementContext))]
    partial class QuizManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"));

                    b.Property<string>("CampusName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampusId");

                    b.ToTable("Campuses");

                    b.HasData(
                        new
                        {
                            CampusId = 1,
                            CampusName = "Ha Noi",
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2077),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2098)
                        },
                        new
                        {
                            CampusId = 2,
                            CampusName = "Da Nang",
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2105),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2107)
                        },
                        new
                        {
                            CampusId = 3,
                            CampusName = "Can Tho",
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2112),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2113)
                        },
                        new
                        {
                            CampusId = 4,
                            CampusName = "Ho Chi Minh",
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2117),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2118)
                        },
                        new
                        {
                            CampusId = 5,
                            CampusName = "Quy Nhon",
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2122),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2123)
                        });
                });

            modelBuilder.Entity("Library.Models.CampusUserSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CampusId" }, "IX_CampusUserSubject_CampusId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_CampusUserSubject_SubjectId");

                    b.HasIndex(new[] { "UserId" }, "IX_CampusUserSubject_UserId");

                    b.ToTable("CampusUserSubject", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CampusId = 1,
                            SubjectId = 1,
                            UserId = 12
                        },
                        new
                        {
                            Id = 2,
                            CampusId = 1,
                            SubjectId = 2,
                            UserId = 12
                        },
                        new
                        {
                            Id = 3,
                            CampusId = 1,
                            SubjectId = 3,
                            UserId = 12
                        },
                        new
                        {
                            Id = 4,
                            CampusId = 1,
                            SubjectId = 4,
                            UserId = 12
                        },
                        new
                        {
                            Id = 5,
                            CampusId = 1,
                            SubjectId = 5,
                            UserId = 12
                        },
                        new
                        {
                            Id = 6,
                            CampusId = 1,
                            SubjectId = 6,
                            UserId = 13
                        },
                        new
                        {
                            Id = 7,
                            CampusId = 1,
                            SubjectId = 7,
                            UserId = 13
                        },
                        new
                        {
                            Id = 8,
                            CampusId = 1,
                            SubjectId = 8,
                            UserId = 13
                        },
                        new
                        {
                            Id = 9,
                            CampusId = 1,
                            SubjectId = 9,
                            UserId = 13
                        },
                        new
                        {
                            Id = 10,
                            CampusId = 1,
                            SubjectId = 10,
                            UserId = 13
                        },
                        new
                        {
                            Id = 11,
                            CampusId = 2,
                            SubjectId = 1,
                            UserId = 14
                        },
                        new
                        {
                            Id = 12,
                            CampusId = 2,
                            SubjectId = 2,
                            UserId = 14
                        },
                        new
                        {
                            Id = 13,
                            CampusId = 2,
                            SubjectId = 3,
                            UserId = 14
                        },
                        new
                        {
                            Id = 14,
                            CampusId = 2,
                            SubjectId = 4,
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            CampusId = 2,
                            SubjectId = 5,
                            UserId = 14
                        },
                        new
                        {
                            Id = 16,
                            CampusId = 2,
                            SubjectId = 6,
                            UserId = 15
                        },
                        new
                        {
                            Id = 17,
                            CampusId = 2,
                            SubjectId = 7,
                            UserId = 15
                        },
                        new
                        {
                            Id = 18,
                            CampusId = 2,
                            SubjectId = 8,
                            UserId = 15
                        },
                        new
                        {
                            Id = 19,
                            CampusId = 2,
                            SubjectId = 9,
                            UserId = 15
                        },
                        new
                        {
                            Id = 20,
                            CampusId = 2,
                            SubjectId = 10,
                            UserId = 15
                        },
                        new
                        {
                            Id = 21,
                            CampusId = 3,
                            SubjectId = 1,
                            UserId = 16
                        },
                        new
                        {
                            Id = 22,
                            CampusId = 3,
                            SubjectId = 2,
                            UserId = 16
                        },
                        new
                        {
                            Id = 23,
                            CampusId = 3,
                            SubjectId = 3,
                            UserId = 16
                        },
                        new
                        {
                            Id = 24,
                            CampusId = 3,
                            SubjectId = 4,
                            UserId = 16
                        },
                        new
                        {
                            Id = 25,
                            CampusId = 3,
                            SubjectId = 5,
                            UserId = 16
                        },
                        new
                        {
                            Id = 26,
                            CampusId = 3,
                            SubjectId = 6,
                            UserId = 17
                        },
                        new
                        {
                            Id = 27,
                            CampusId = 3,
                            SubjectId = 7,
                            UserId = 17
                        },
                        new
                        {
                            Id = 28,
                            CampusId = 3,
                            SubjectId = 8,
                            UserId = 17
                        },
                        new
                        {
                            Id = 29,
                            CampusId = 3,
                            SubjectId = 9,
                            UserId = 17
                        },
                        new
                        {
                            Id = 30,
                            CampusId = 3,
                            SubjectId = 10,
                            UserId = 17
                        },
                        new
                        {
                            Id = 31,
                            CampusId = 4,
                            SubjectId = 1,
                            UserId = 18
                        },
                        new
                        {
                            Id = 32,
                            CampusId = 4,
                            SubjectId = 2,
                            UserId = 18
                        },
                        new
                        {
                            Id = 33,
                            CampusId = 4,
                            SubjectId = 3,
                            UserId = 18
                        },
                        new
                        {
                            Id = 34,
                            CampusId = 4,
                            SubjectId = 4,
                            UserId = 18
                        },
                        new
                        {
                            Id = 35,
                            CampusId = 4,
                            SubjectId = 5,
                            UserId = 18
                        },
                        new
                        {
                            Id = 36,
                            CampusId = 4,
                            SubjectId = 6,
                            UserId = 19
                        },
                        new
                        {
                            Id = 37,
                            CampusId = 4,
                            SubjectId = 7,
                            UserId = 19
                        },
                        new
                        {
                            Id = 38,
                            CampusId = 4,
                            SubjectId = 8,
                            UserId = 19
                        },
                        new
                        {
                            Id = 39,
                            CampusId = 4,
                            SubjectId = 9,
                            UserId = 19
                        },
                        new
                        {
                            Id = 40,
                            CampusId = 4,
                            SubjectId = 10,
                            UserId = 19
                        },
                        new
                        {
                            Id = 41,
                            CampusId = 5,
                            SubjectId = 1,
                            UserId = 20
                        },
                        new
                        {
                            Id = 42,
                            CampusId = 5,
                            SubjectId = 2,
                            UserId = 20
                        },
                        new
                        {
                            Id = 43,
                            CampusId = 5,
                            SubjectId = 3,
                            UserId = 20
                        },
                        new
                        {
                            Id = 44,
                            CampusId = 5,
                            SubjectId = 4,
                            UserId = 20
                        },
                        new
                        {
                            Id = 45,
                            CampusId = 5,
                            SubjectId = 5,
                            UserId = 20
                        },
                        new
                        {
                            Id = 46,
                            CampusId = 5,
                            SubjectId = 6,
                            UserId = 21
                        },
                        new
                        {
                            Id = 47,
                            CampusId = 5,
                            SubjectId = 7,
                            UserId = 21
                        },
                        new
                        {
                            Id = 48,
                            CampusId = 5,
                            SubjectId = 8,
                            UserId = 21
                        },
                        new
                        {
                            Id = 49,
                            CampusId = 5,
                            SubjectId = 9,
                            UserId = 21
                        },
                        new
                        {
                            Id = 50,
                            CampusId = 5,
                            SubjectId = 10,
                            UserId = 21
                        });
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreaterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedTimeTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExamDuration")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ExamStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ExamType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamId");

                    b.HasIndex(new[] { "CampusId" }, "IX_Exams_CampusId");

                    b.HasIndex(new[] { "CreaterId" }, "IX_Exams_CreaterId");

                    b.HasIndex(new[] { "ExamStatusId" }, "IX_Exams_ExamStatusId");

                    b.HasIndex(new[] { "SubjectId" }, "IX_Exams_SubjectId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6755),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6751),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6631),
                            ExamCode = "PRN211_Q1_10_123456",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 5,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6747),
                            SubjectId = 1,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6756)
                        },
                        new
                        {
                            ExamId = 2,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6827),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6823),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6816),
                            ExamCode = "PRN211_Q2_5_654321",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 5,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6818),
                            SubjectId = 1,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6828)
                        },
                        new
                        {
                            ExamId = 3,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6844),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6843),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6835),
                            ExamCode = "PRN221_Q1_10_789012",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 6,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6841),
                            SubjectId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6845)
                        },
                        new
                        {
                            ExamId = 4,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6859),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6858),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6855),
                            ExamCode = "PRN221_Q2_5_210987",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6857),
                            SubjectId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6861)
                        },
                        new
                        {
                            ExamId = 5,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6875),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6873),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6870),
                            ExamCode = "PRN231_Q1_10_345678",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6872),
                            SubjectId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6877)
                        },
                        new
                        {
                            ExamId = 6,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6890),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6888),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6886),
                            ExamCode = "PRN231_Q2_5_876543",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6887),
                            SubjectId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6894)
                        },
                        new
                        {
                            ExamId = 7,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6906),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6905),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6902),
                            ExamCode = "MAE101_Q1_10_234567",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6904),
                            SubjectId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6909)
                        },
                        new
                        {
                            ExamId = 8,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6926),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6923),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6920),
                            ExamCode = "MAE101_Q2_5_765432",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6921),
                            SubjectId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6929)
                        },
                        new
                        {
                            ExamId = 9,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6938),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6937),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6935),
                            ExamCode = "NWC203c_Q1_10_345678",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6936),
                            SubjectId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6942)
                        },
                        new
                        {
                            ExamId = 10,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6957),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6954),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6950),
                            ExamCode = "NWC203c_Q2_5_876543",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6951),
                            SubjectId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6960)
                        },
                        new
                        {
                            ExamId = 11,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6972),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6969),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6965),
                            ExamCode = "ECO111_Q1_10_111222",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 6,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6966),
                            SubjectId = 6,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6976)
                        },
                        new
                        {
                            ExamId = 12,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6985),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6982),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6980),
                            ExamCode = "ECO111_Q2_5_222111",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 6,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6981),
                            SubjectId = 6,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6988)
                        },
                        new
                        {
                            ExamId = 13,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7002),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6999),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6996),
                            ExamCode = "ECO121_Q1_10_333444",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(6997),
                            SubjectId = 7,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7005)
                        },
                        new
                        {
                            ExamId = 14,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7016),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7014),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7011),
                            ExamCode = "ECO121_Q2_5_444333",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7013),
                            SubjectId = 7,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7019)
                        },
                        new
                        {
                            ExamId = 15,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7162),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7161),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7154),
                            ExamCode = "ECO201_Q1_10_555666",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7160),
                            SubjectId = 8,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7164)
                        },
                        new
                        {
                            ExamId = 16,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7177),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7176),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7171),
                            ExamCode = "ECO201_Q2_5_666555",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7174),
                            SubjectId = 8,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7178)
                        },
                        new
                        {
                            ExamId = 17,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7192),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7191),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7185),
                            ExamCode = "ACC101_Q1_10_777888",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7189),
                            SubjectId = 9,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7193)
                        },
                        new
                        {
                            ExamId = 18,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7208),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7207),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7205),
                            ExamCode = "ACC101_Q2_5_888777",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7206),
                            SubjectId = 9,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7211)
                        },
                        new
                        {
                            ExamId = 19,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7223),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7221),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7219),
                            ExamCode = "MKT101_Q1_10_999000",
                            ExamDuration = "Block 10 (10 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7220),
                            SubjectId = 10,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7224)
                        },
                        new
                        {
                            ExamId = 20,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7237),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7236),
                            EstimatedTimeTest = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7234),
                            ExamCode = "MKT101_Q2_5_000999",
                            ExamDuration = "Block 5 (5 weeks)",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7235),
                            SubjectId = 10,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7238)
                        });
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Property<int>("ExamStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamStatusId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusContent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamStatusId");

                    b.ToTable("ExamStatuses");

                    b.HasData(
                        new
                        {
                            ExamStatusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2715),
                            StatusContent = "Not Assign",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2719)
                        },
                        new
                        {
                            ExamStatusId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2723),
                            StatusContent = "Waiting to Assign",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2725)
                        },
                        new
                        {
                            ExamStatusId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2728),
                            StatusContent = "Assigned",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2730)
                        },
                        new
                        {
                            ExamStatusId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2733),
                            StatusContent = "Reviewing",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2735)
                        },
                        new
                        {
                            ExamStatusId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2737),
                            StatusContent = "Finish Review",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2738)
                        },
                        new
                        {
                            ExamStatusId = 6,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2741),
                            StatusContent = "Complete",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2742)
                        });
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex(new[] { "AssignedUserId" }, "IX_InstructorAssignments_AssignedTo");

                    b.HasIndex(new[] { "ExamId" }, "IX_InstructorAssignments_ExamId");

                    b.ToTable("InstructorAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssignedUserId = 12,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7764),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7775),
                            ExamId = 1,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7777)
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssignedUserId = 12,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7782),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7787),
                            ExamId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7791)
                        },
                        new
                        {
                            AssignmentId = 3,
                            AssignedUserId = 12,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7794),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7795),
                            ExamId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7796)
                        },
                        new
                        {
                            AssignmentId = 4,
                            AssignedUserId = 13,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7801),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7804),
                            ExamId = 11,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7808)
                        },
                        new
                        {
                            AssignmentId = 5,
                            AssignedUserId = 13,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7810),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7811),
                            ExamId = 12,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7813)
                        },
                        new
                        {
                            AssignmentId = 6,
                            AssignedUserId = 7,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7818),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7822),
                            ExamId = 1,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7823)
                        },
                        new
                        {
                            AssignmentId = 7,
                            AssignedUserId = 7,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7826),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7827),
                            ExamId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7828)
                        },
                        new
                        {
                            AssignmentId = 8,
                            AssignedUserId = 7,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7834),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7837),
                            ExamId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7839)
                        },
                        new
                        {
                            AssignmentId = 9,
                            AssignedUserId = 27,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7841),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7842),
                            ExamId = 11,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7844)
                        },
                        new
                        {
                            AssignmentId = 10,
                            AssignedUserId = 27,
                            AssignmentDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7848),
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7851),
                            ExamId = 12,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(7854)
                        });
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsProgram")
                        .HasColumnType("bit");

                    b.Property<string>("MenuLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8914),
                            MenuLink = "/usermanagement",
                            MenuName = "User management",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8933)
                        },
                        new
                        {
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8938),
                            MenuLink = "/Admin/History",
                            MenuName = "History",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8941)
                        },
                        new
                        {
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8944),
                            MenuLink = "/TestDepartment/ExamList",
                            MenuName = "Exam List",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8946)
                        },
                        new
                        {
                            MenuId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8949),
                            MenuLink = "/HeadDepartment/ExamList",
                            MenuName = "Head Department List",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8954)
                        },
                        new
                        {
                            MenuId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8957),
                            MenuLink = "/Lecture/ExamList",
                            MenuName = "Lecture List",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(8958)
                        });
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex(new[] { "MenuId" }, "IX_MenuRoles_MenuId");

                    b.ToTable("MenuRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9066),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9068)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9072),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9074)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9077),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9078)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9081),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9082)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9085),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9087)
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9089),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9091)
                        },
                        new
                        {
                            RoleId = 3,
                            MenuId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9093),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9095)
                        },
                        new
                        {
                            RoleId = 4,
                            MenuId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9097),
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9098)
                        });
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<int?>("AssignemtId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionSolutionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReportId");

                    b.HasIndex("AssignemtId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9216),
                            QuestionNumber = 1,
                            QuestionSolutionDetail = "Correct the code snippet by replacing 'Console.Writeline' with 'Console.WriteLine'.",
                            ReportContent = "In PRN211, question 1 contains an incorrect code snippet that causes compilation errors.",
                            Score = 8f,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9219)
                        },
                        new
                        {
                            ReportId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9224),
                            QuestionNumber = 2,
                            QuestionSolutionDetail = "Revise the logic to ensure it follows the proper algorithmic steps.",
                            ReportContent = "In PRN211, question 2 has an outdated logic that leads to incorrect output.",
                            Score = 9f,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9226)
                        },
                        new
                        {
                            ReportId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9229),
                            QuestionNumber = 3,
                            QuestionSolutionDetail = "Update the definition to clarify that asynchronous programming allows multiple tasks to run concurrently without blocking.",
                            ReportContent = "In PRN221, question 3 incorrectly defines the concept of asynchronous programming.",
                            Score = 8f,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9230)
                        },
                        new
                        {
                            ReportId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9234),
                            QuestionNumber = 4,
                            QuestionSolutionDetail = "Provide a more detailed explanation of how supply and demand interact in a market.",
                            ReportContent = "In ECO111, question 4 fails to explain the principle of supply and demand adequately.",
                            Score = 9f,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9235)
                        },
                        new
                        {
                            ReportId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9239),
                            QuestionNumber = 5,
                            QuestionSolutionDetail = "Revise the calculation method to correctly reflect the intersection of supply and demand curves.",
                            ReportContent = "In ECO111, question 5 has an error in the calculation of equilibrium price.",
                            Score = 8f,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 752, DateTimeKind.Local).AddTicks(9240)
                        });
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SubjectName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3519),
                            SubjectCode = "PRN211",
                            SubjectName = "Basic Cross-Platform Application Programming With .NET",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3524)
                        },
                        new
                        {
                            SubjectId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3532),
                            SubjectCode = "PRN221",
                            SubjectName = "Advanced Cross-Platform Application Programming With .NET",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3536)
                        },
                        new
                        {
                            SubjectId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3544),
                            SubjectCode = "PRN231",
                            SubjectName = "Building Cross-Platform Back-End Application With .NET",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3548)
                        },
                        new
                        {
                            SubjectId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3556),
                            SubjectCode = "MAE101",
                            SubjectName = "Mathematics for Engineering",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3560)
                        },
                        new
                        {
                            SubjectId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3568),
                            SubjectCode = "NWC203c",
                            SubjectName = "Computer Networking",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3574)
                        },
                        new
                        {
                            SubjectId = 6,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3581),
                            SubjectCode = "ECO111",
                            SubjectName = "Microeconomics",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3585)
                        },
                        new
                        {
                            SubjectId = 7,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3593),
                            SubjectCode = "ECO121",
                            SubjectName = "Basic Macro Economics",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3597)
                        },
                        new
                        {
                            SubjectId = 8,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3605),
                            SubjectCode = "ECO201",
                            SubjectName = "International Economics",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            SubjectId = 9,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3617),
                            SubjectCode = "ACC101",
                            SubjectName = "Principles of Accounting",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3621)
                        },
                        new
                        {
                            SubjectId = 10,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3629),
                            SubjectCode = "MKT101",
                            SubjectName = "Marketing Principles",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3633)
                        });
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "CampusId" }, "IX_Users_CampusId");

                    b.HasIndex(new[] { "RoleId" }, "IX_Users_RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3042),
                            IsActive = true,
                            Mail = "admin@fpt.edu.vn",
                            RoleId = 1,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3047)
                        },
                        new
                        {
                            UserId = 2,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3058),
                            IsActive = true,
                            Mail = "lienkt@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3063)
                        },
                        new
                        {
                            UserId = 3,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3073),
                            IsActive = true,
                            Mail = "hoanglm@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3078)
                        },
                        new
                        {
                            UserId = 4,
                            CampusId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3087),
                            IsActive = true,
                            Mail = "anhnq@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3092)
                        },
                        new
                        {
                            UserId = 5,
                            CampusId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3102),
                            IsActive = true,
                            Mail = "minhnh@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3106)
                        },
                        new
                        {
                            UserId = 6,
                            CampusId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3115),
                            IsActive = true,
                            Mail = "phongtl@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3119)
                        },
                        new
                        {
                            UserId = 7,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3129),
                            IsActive = true,
                            Mail = "lanhbt@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3132)
                        },
                        new
                        {
                            UserId = 8,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3142),
                            IsActive = true,
                            Mail = "khoadt@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3146)
                        },
                        new
                        {
                            UserId = 9,
                            CampusId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3183),
                            IsActive = true,
                            Mail = "hoangtm@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3187)
                        },
                        new
                        {
                            UserId = 10,
                            CampusId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3198),
                            IsActive = true,
                            Mail = "minhph@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3202)
                        },
                        new
                        {
                            UserId = 11,
                            CampusId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3213),
                            IsActive = true,
                            Mail = "trangnt@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3217)
                        },
                        new
                        {
                            UserId = 27,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3227),
                            IsActive = true,
                            Mail = "quanpt@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3231)
                        },
                        new
                        {
                            UserId = 12,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3246),
                            IsActive = true,
                            Mail = "namlh@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3250)
                        },
                        new
                        {
                            UserId = 13,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3260),
                            IsActive = true,
                            Mail = "quangnv@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3264)
                        },
                        new
                        {
                            UserId = 14,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3275),
                            IsActive = true,
                            Mail = "huylt@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3276)
                        },
                        new
                        {
                            UserId = 15,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3281),
                            IsActive = true,
                            Mail = "tuanpv@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3282)
                        },
                        new
                        {
                            UserId = 16,
                            CampusId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3286),
                            IsActive = true,
                            Mail = "ngocdt@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3288)
                        },
                        new
                        {
                            UserId = 17,
                            CampusId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3293),
                            IsActive = true,
                            Mail = "minhth@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3294)
                        },
                        new
                        {
                            UserId = 18,
                            CampusId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3300),
                            IsActive = true,
                            Mail = "binhlt@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3301)
                        },
                        new
                        {
                            UserId = 19,
                            CampusId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3305),
                            IsActive = true,
                            Mail = "lanhnv@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3307)
                        },
                        new
                        {
                            UserId = 20,
                            CampusId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3310),
                            IsActive = true,
                            Mail = "duongkt@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3312)
                        },
                        new
                        {
                            UserId = 21,
                            CampusId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3320),
                            IsActive = true,
                            Mail = "phuonglt@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3321)
                        },
                        new
                        {
                            UserId = 22,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3325),
                            IsActive = true,
                            Mail = "phucdt@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3326)
                        },
                        new
                        {
                            UserId = 23,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3331),
                            IsActive = true,
                            Mail = "thanhnt@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3332)
                        },
                        new
                        {
                            UserId = 24,
                            CampusId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3336),
                            IsActive = true,
                            Mail = "hungpv@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3337)
                        },
                        new
                        {
                            UserId = 25,
                            CampusId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3341),
                            IsActive = true,
                            Mail = "anhpt@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3343)
                        },
                        new
                        {
                            UserId = 26,
                            CampusId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3347),
                            IsActive = true,
                            Mail = "truongvq@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(3349)
                        });
                });

            modelBuilder.Entity("Library.Models.UserHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LogContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LogDt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserHistory_UserId");

                    b.ToTable("UserHistory", (string)null);
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2827),
                            RoleName = "Admin",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2830)
                        },
                        new
                        {
                            RoleId = 2,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2834),
                            RoleName = "Examiner",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2836)
                        },
                        new
                        {
                            RoleId = 3,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2839),
                            RoleName = "Lecturer",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2840)
                        },
                        new
                        {
                            RoleId = 4,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2844),
                            RoleName = "Head of Department",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2872)
                        },
                        new
                        {
                            RoleId = 5,
                            CreateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2902),
                            RoleName = "Program Developer",
                            UpdateDate = new DateTime(2024, 10, 7, 10, 56, 28, 750, DateTimeKind.Local).AddTicks(2904)
                        });
                });

            modelBuilder.Entity("Library.Models.CampusUserSubject", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("CampusUserSubjects")
                        .HasForeignKey("CampusId")
                        .HasConstraintName("FK_CampusUserSubject_Campuses");

                    b.HasOne("Library.Models.Subject", "Subject")
                        .WithMany("CampusUserSubjects")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_CampusUserSubject_Subjects");

                    b.HasOne("Library.Models.User", "User")
                        .WithMany("CampusUserSubjects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_CampusUserSubject_Users");

                    b.Navigation("Campus");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("Exams")
                        .HasForeignKey("CampusId")
                        .HasConstraintName("FK_Exams_Campuses");

                    b.HasOne("Library.Models.User", "Creater")
                        .WithMany("Exams")
                        .HasForeignKey("CreaterId")
                        .IsRequired();

                    b.HasOne("Library.Models.ExamStatus", "ExamStatus")
                        .WithMany("Exams")
                        .HasForeignKey("ExamStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Library.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Campus");

                    b.Navigation("Creater");

                    b.Navigation("ExamStatus");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.HasOne("Library.Models.User", "AssignedUser")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("AssignedUserId")
                        .IsRequired()
                        .HasConstraintName("FK_InstructorAssignments_Users_AssignedTo");

                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("ExamId")
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.HasOne("Library.Models.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.HasOne("Library.Models.InstructorAssignment", "Assignemt")
                        .WithMany("Reports")
                        .HasForeignKey("AssignemtId")
                        .HasConstraintName("FK_Reports_InstructorAssignments");

                    b.Navigation("Assignemt");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("Users")
                        .HasForeignKey("CampusId")
                        .HasConstraintName("FK_Users_Campuses");

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Campus");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.UserHistory", b =>
                {
                    b.HasOne("Library.Models.User", "User")
                        .WithMany("UserHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserHistory_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Navigation("CampusUserSubjects");

                    b.Navigation("Exams");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Navigation("InstructorAssignments");
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Navigation("CampusUserSubjects");

                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Navigation("CampusUserSubjects");

                    b.Navigation("Exams");

                    b.Navigation("InstructorAssignments");

                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
