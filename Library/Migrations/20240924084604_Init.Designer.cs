// <auto-generated />
using System;
using Library.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(QuizManagementContext))]
    [Migration("20240924084604_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Property<int>("CampusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampusId"));

                    b.Property<string>("CampusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampusId");

                    b.ToTable("Campuses");

                    b.HasData(
                        new
                        {
                            CampusId = 1,
                            CampusName = "Hanoi",
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8251),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8280)
                        },
                        new
                        {
                            CampusId = 2,
                            CampusName = "Ho Chi Minh",
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8282),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8283)
                        });
                });

            modelBuilder.Entity("Library.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("HeadOfDepartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.HasIndex("HeadOfDepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8768),
                            DepartmentName = "Information Technology",
                            HeadOfDepartmentId = 4,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8770)
                        },
                        new
                        {
                            DepartmentId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8772),
                            DepartmentName = "Data Science",
                            HeadOfDepartmentId = 6,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8772)
                        });
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreaterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedTimeTest")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExamDuration")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ExamStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ExamType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamId");

                    b.HasIndex("CreaterId");

                    b.HasIndex("ExamStatusId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Exams");

                    b.HasData(
                        new
                        {
                            ExamId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8858),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8858),
                            EstimatedTimeTest = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8855),
                            ExamCode = "EXAM001",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Essay",
                            StartDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8856),
                            SubjectId = 1,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8861)
                        },
                        new
                        {
                            ExamId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8864),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8864),
                            EstimatedTimeTest = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8863),
                            ExamCode = "EXAM002",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8863),
                            SubjectId = 2,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8865)
                        },
                        new
                        {
                            ExamId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8869),
                            CreaterId = 2,
                            EndDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8868),
                            EstimatedTimeTest = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8867),
                            ExamCode = "EXAM003",
                            ExamDuration = "10w",
                            ExamStatusId = 1,
                            ExamType = "Multiple Choice",
                            StartDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8868),
                            SubjectId = 3,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8871)
                        });
                });

            modelBuilder.Entity("Library.Models.ExamAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssignedBy = 2,
                            AssignedTo = 1,
                            AssignmentDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8899),
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8900),
                            ExamId = 1,
                            Status = "Pending",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8902)
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssignedBy = 2,
                            AssignedTo = 2,
                            AssignmentDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8904),
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8907),
                            ExamId = 2,
                            Status = "Assigned",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8910)
                        },
                        new
                        {
                            AssignmentId = 3,
                            AssignedBy = 2,
                            AssignedTo = 2,
                            AssignmentDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8912),
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8912),
                            ExamId = 3,
                            Status = "Assigned",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8913)
                        });
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Property<int>("ExamStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamStatusId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExamStatusId");

                    b.ToTable("ExamStatuses");

                    b.HasData(
                        new
                        {
                            ExamStatusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8619),
                            StatusContent = "Not started",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8620)
                        },
                        new
                        {
                            ExamStatusId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8622),
                            StatusContent = "In progress",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8622)
                        },
                        new
                        {
                            ExamStatusId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8624),
                            StatusContent = "Completed",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8624)
                        },
                        new
                        {
                            ExamStatusId = 4,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8625),
                            StatusContent = "Cancelled",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8626)
                        });
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("ExamId");

                    b.ToTable("InstructorAssignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            AssignedTo = 3,
                            AssignmentDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(9088),
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(9091),
                            ExamId = 1,
                            Status = "Pending",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(9093)
                        },
                        new
                        {
                            AssignmentId = 2,
                            AssignedTo = 3,
                            AssignmentDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(9095),
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(9095),
                            ExamId = 2,
                            Status = "Assigned",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(9096)
                        });
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MenuId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(476),
                            MenuName = "Dashboard",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(481)
                        },
                        new
                        {
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(486),
                            MenuName = "Exam Management",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(486)
                        },
                        new
                        {
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(487),
                            MenuName = "User Management",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(488)
                        });
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            MenuId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(530),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(531)
                        },
                        new
                        {
                            RoleId = 2,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(539),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(539)
                        },
                        new
                        {
                            RoleId = 3,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(541),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(541)
                        },
                        new
                        {
                            RoleId = 4,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(542),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(543)
                        },
                        new
                        {
                            RoleId = 5,
                            MenuId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(544),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(544)
                        },
                        new
                        {
                            RoleId = 1,
                            MenuId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(545),
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(546)
                        });
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuestionSolutionDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("ExamId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(586),
                            ExamId = 1,
                            QuestionNumber = 1,
                            QuestionSolutionDetail = "Solution explanation 1",
                            ReportContent = "Report 1",
                            Score = 90f,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(587),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(590),
                            ExamId = 2,
                            QuestionNumber = 2,
                            QuestionSolutionDetail = "Solution explanation 2",
                            ReportContent = "Report 2",
                            Score = 85f,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(590),
                            UserId = 3
                        },
                        new
                        {
                            ReviewId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(592),
                            ExamId = 3,
                            QuestionNumber = 3,
                            QuestionSolutionDetail = "Solution explanation 3",
                            ReportContent = "Report 3",
                            Score = 75f,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 616, DateTimeKind.Local).AddTicks(592),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubjectId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8810),
                            DepartmentId = 1,
                            SubjectName = "C# Programming",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8810)
                        },
                        new
                        {
                            SubjectId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8812),
                            DepartmentId = 1,
                            SubjectName = "Computer Science",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8813)
                        },
                        new
                        {
                            SubjectId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8814),
                            DepartmentId = 2,
                            SubjectName = "Machine Learning",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8815)
                        });
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("CampusId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8711),
                            IsActive = true,
                            Mail = "admin@fpt.edu.vn",
                            RoleId = 1,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8711)
                        },
                        new
                        {
                            UserId = 2,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8714),
                            IsActive = true,
                            Mail = "examiner@fpt.edu.vn",
                            RoleId = 2,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8714)
                        },
                        new
                        {
                            UserId = 3,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8716),
                            IsActive = true,
                            Mail = "lecturer@fpt.edu.vn",
                            RoleId = 3,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8717)
                        },
                        new
                        {
                            UserId = 4,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8718),
                            IsActive = true,
                            Mail = "head@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8719)
                        },
                        new
                        {
                            UserId = 5,
                            CampusId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8721),
                            IsActive = true,
                            Mail = "developer@fpt.edu.vn",
                            RoleId = 5,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8721)
                        },
                        new
                        {
                            UserId = 6,
                            CampusId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8725),
                            IsActive = true,
                            Mail = "trunghp@fpt.edu.vn",
                            RoleId = 4,
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8726)
                        });
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8654),
                            RoleName = "Admin",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8655)
                        },
                        new
                        {
                            RoleId = 2,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8661),
                            RoleName = "Examiner",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8661)
                        },
                        new
                        {
                            RoleId = 3,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8663),
                            RoleName = "Lecturer",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8663)
                        },
                        new
                        {
                            RoleId = 4,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8664),
                            RoleName = "Head of Department",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8665)
                        },
                        new
                        {
                            RoleId = 5,
                            CreateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8666),
                            RoleName = "Program Developer",
                            UpdateDate = new DateTime(2024, 9, 24, 15, 46, 3, 615, DateTimeKind.Local).AddTicks(8667)
                        });
                });

            modelBuilder.Entity("Library.Models.Department", b =>
                {
                    b.HasOne("Library.Models.User", "HeadOfDepartment")
                        .WithMany()
                        .HasForeignKey("HeadOfDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeadOfDepartment");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.HasOne("Library.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreaterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Library.Models.ExamStatus", "ExamStatus")
                        .WithMany("Exams")
                        .HasForeignKey("ExamStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("ExamStatus");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Library.Models.ExamAssignment", b =>
                {
                    b.HasOne("Library.Models.User", "Assigner")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.Department", "AssignedDepartment")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("ExamAssignments")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedDepartment");

                    b.Navigation("Assigner");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Library.Models.InstructorAssignment", b =>
                {
                    b.HasOne("Library.Models.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("InstructorAssignments")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Library.Models.MenuRole", b =>
                {
                    b.HasOne("Library.Models.Menu", "Menu")
                        .WithMany("MenuRoles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.UserRole", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Models.Report", b =>
                {
                    b.HasOne("Library.Models.Exam", "Exam")
                        .WithMany("Reports")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.HasOne("Library.Models.Department", "Department")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.HasOne("Library.Models.Campus", "Campus")
                        .WithMany("Users")
                        .HasForeignKey("CampusId");

                    b.HasOne("Library.Models.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Campus");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Library.Models.Campus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Models.Department", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Library.Models.Exam", b =>
                {
                    b.Navigation("ExamAssignments");

                    b.Navigation("InstructorAssignments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Library.Models.ExamStatus", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.Menu", b =>
                {
                    b.Navigation("MenuRoles");
                });

            modelBuilder.Entity("Library.Models.Subject", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Library.Models.User", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Library.Models.UserRole", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
